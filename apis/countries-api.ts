// tslint:disable
/**
 * shiprocket
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InlineResponse20046 } from '../models';
// @ts-ignore
import { InlineResponse20047 } from '../models';
// @ts-ignore
import { InlineResponse403 } from '../models';
/**
 * CountriesApi - axios parameter creator
 * @export
 */
export const CountriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API lists all the countries present in the Shiprocket database and the respective country ids, ISO 2 and ISO 3 codes.  There are a total of 44 available countries in the database. You can use these codes to check the serviceability and use them in your dropdown menu.  No parameters are required to access this API.
         * @summary Get Country Codes
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalCountriesGet: async (contentType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling v1ExternalCountriesGet.');
            }
            const localVarPath = `/v1/external/countries`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to get a further list of all the available zones within a country, along with their ids and details.  The country ID must be passed as a path parameter to access this API. No other body parameters are required.  #### Path:   |                 **EXAMPLE**                 | |:------------------------------------------: | | https://apiv2.shiprocket.in/v1/external/countries/show/4  |
         * @summary Get All Zones
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalCountriesShowCountryIdGet: async (contentType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling v1ExternalCountriesShowCountryIdGet.');
            }
            const localVarPath = `/v1/external/countries/show/{country_id}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to get further locality details of any given postcode. Just pass the valid locality Pincode, and the details will be displayed in JSON format.  #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | |:----------:|:------------:|:-------------:|:---------------------------------------------------:|:-----------:| | `postcode` | YES | *integer* | The Pincode you want to get the locality details. | 110077 |
         * @summary Get Locality Details
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalOpenPostcodeDetailsGet: async (contentType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling v1ExternalOpenPostcodeDetailsGet.');
            }
            const localVarPath = `/v1/external/open/postcode/details`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CountriesApi - functional programming interface
 * @export
 */
export const CountriesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This API lists all the countries present in the Shiprocket database and the respective country ids, ISO 2 and ISO 3 codes.  There are a total of 44 available countries in the database. You can use these codes to check the serviceability and use them in your dropdown menu.  No parameters are required to access this API.
         * @summary Get Country Codes
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExternalCountriesGet(contentType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await CountriesApiAxiosParamCreator(configuration).v1ExternalCountriesGet(contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Use this API to get a further list of all the available zones within a country, along with their ids and details.  The country ID must be passed as a path parameter to access this API. No other body parameters are required.  #### Path:   |                 **EXAMPLE**                 | |:------------------------------------------: | | https://apiv2.shiprocket.in/v1/external/countries/show/4  |
         * @summary Get All Zones
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExternalCountriesShowCountryIdGet(contentType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20046>> {
            const localVarAxiosArgs = await CountriesApiAxiosParamCreator(configuration).v1ExternalCountriesShowCountryIdGet(contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Use this API to get further locality details of any given postcode. Just pass the valid locality Pincode, and the details will be displayed in JSON format.  #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | |:----------:|:------------:|:-------------:|:---------------------------------------------------:|:-----------:| | `postcode` | YES | *integer* | The Pincode you want to get the locality details. | 110077 |
         * @summary Get Locality Details
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExternalOpenPostcodeDetailsGet(contentType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20047>> {
            const localVarAxiosArgs = await CountriesApiAxiosParamCreator(configuration).v1ExternalOpenPostcodeDetailsGet(contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CountriesApi - factory interface
 * @export
 */
export const CountriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This API lists all the countries present in the Shiprocket database and the respective country ids, ISO 2 and ISO 3 codes.  There are a total of 44 available countries in the database. You can use these codes to check the serviceability and use them in your dropdown menu.  No parameters are required to access this API.
         * @summary Get Country Codes
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalCountriesGet(contentType: string, options?: any): AxiosPromise<object> {
            return CountriesApiFp(configuration).v1ExternalCountriesGet(contentType, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to get a further list of all the available zones within a country, along with their ids and details.  The country ID must be passed as a path parameter to access this API. No other body parameters are required.  #### Path:   |                 **EXAMPLE**                 | |:------------------------------------------: | | https://apiv2.shiprocket.in/v1/external/countries/show/4  |
         * @summary Get All Zones
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalCountriesShowCountryIdGet(contentType: string, options?: any): AxiosPromise<InlineResponse20046> {
            return CountriesApiFp(configuration).v1ExternalCountriesShowCountryIdGet(contentType, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to get further locality details of any given postcode. Just pass the valid locality Pincode, and the details will be displayed in JSON format.  #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | |:----------:|:------------:|:-------------:|:---------------------------------------------------:|:-----------:| | `postcode` | YES | *integer* | The Pincode you want to get the locality details. | 110077 |
         * @summary Get Locality Details
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalOpenPostcodeDetailsGet(contentType: string, options?: any): AxiosPromise<InlineResponse20047> {
            return CountriesApiFp(configuration).v1ExternalOpenPostcodeDetailsGet(contentType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CountriesApi - interface
 * @export
 * @interface CountriesApi
 */
export interface CountriesApiInterface {
    /**
     * This API lists all the countries present in the Shiprocket database and the respective country ids, ISO 2 and ISO 3 codes.  There are a total of 44 available countries in the database. You can use these codes to check the serviceability and use them in your dropdown menu.  No parameters are required to access this API.
     * @summary Get Country Codes
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApiInterface
     */
    v1ExternalCountriesGet(contentType: string, options?: any): AxiosPromise<object>;

    /**
     * Use this API to get a further list of all the available zones within a country, along with their ids and details.  The country ID must be passed as a path parameter to access this API. No other body parameters are required.  #### Path:   |                 **EXAMPLE**                 | |:------------------------------------------: | | https://apiv2.shiprocket.in/v1/external/countries/show/4  |
     * @summary Get All Zones
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApiInterface
     */
    v1ExternalCountriesShowCountryIdGet(contentType: string, options?: any): AxiosPromise<InlineResponse20046>;

    /**
     * Use this API to get further locality details of any given postcode. Just pass the valid locality Pincode, and the details will be displayed in JSON format.  #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | |:----------:|:------------:|:-------------:|:---------------------------------------------------:|:-----------:| | `postcode` | YES | *integer* | The Pincode you want to get the locality details. | 110077 |
     * @summary Get Locality Details
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApiInterface
     */
    v1ExternalOpenPostcodeDetailsGet(contentType: string, options?: any): AxiosPromise<InlineResponse20047>;

}

/**
 * CountriesApi - object-oriented interface
 * @export
 * @class CountriesApi
 * @extends {BaseAPI}
 */
export class CountriesApi extends BaseAPI implements CountriesApiInterface {
    /**
     * This API lists all the countries present in the Shiprocket database and the respective country ids, ISO 2 and ISO 3 codes.  There are a total of 44 available countries in the database. You can use these codes to check the serviceability and use them in your dropdown menu.  No parameters are required to access this API.
     * @summary Get Country Codes
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public v1ExternalCountriesGet(contentType: string, options?: any) {
        return CountriesApiFp(this.configuration).v1ExternalCountriesGet(contentType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to get a further list of all the available zones within a country, along with their ids and details.  The country ID must be passed as a path parameter to access this API. No other body parameters are required.  #### Path:   |                 **EXAMPLE**                 | |:------------------------------------------: | | https://apiv2.shiprocket.in/v1/external/countries/show/4  |
     * @summary Get All Zones
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public v1ExternalCountriesShowCountryIdGet(contentType: string, options?: any) {
        return CountriesApiFp(this.configuration).v1ExternalCountriesShowCountryIdGet(contentType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to get further locality details of any given postcode. Just pass the valid locality Pincode, and the details will be displayed in JSON format.  #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | |:----------:|:------------:|:-------------:|:---------------------------------------------------:|:-----------:| | `postcode` | YES | *integer* | The Pincode you want to get the locality details. | 110077 |
     * @summary Get Locality Details
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public v1ExternalOpenPostcodeDetailsGet(contentType: string, options?: any) {
        return CountriesApiFp(this.configuration).v1ExternalOpenPostcodeDetailsGet(contentType, options).then((request) => request(this.axios, this.basePath));
    }

}
