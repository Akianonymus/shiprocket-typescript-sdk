// tslint:disable
/**
 * shiprocket
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InlineResponse20011 } from '../models';
// @ts-ignore
import { InlineResponse403 } from '../models';
/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the order and shipment details of a particular order through this API by passing the Shiprocket order_id in the endpoint URL itself — type in your order_id in place of {id}.  No other body parameters are required.  **Note:**  For SRF orders, you\'ll receive an extra parameter viz., fulfillment_status. This key will have four values:  *   Ready to Pack,  *   Packed *   Added to Picklist *   Picked up         #### Path:  | **EXAMPLE** | | --- | | [https://apiv2.shiprocket.in/v1/external/orders/show/16167171](https://apiv2.shiprocket.in/v1/external/orders/show/16167171) |
         * @summary Get Specific Order Details
         * @param {string} id 
         * @param {string} contentType 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalOrdersShowIdGet: async (id: string, contentType: string, authorization: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v1ExternalOrdersShowIdGet.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling v1ExternalOrdersShowIdGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v1ExternalOrdersShowIdGet.');
            }
            const localVarPath = `/v1/external/orders/show/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get the order and shipment details of a particular order through this API by passing the Shiprocket order_id in the endpoint URL itself — type in your order_id in place of {id}.  No other body parameters are required.  **Note:**  For SRF orders, you\'ll receive an extra parameter viz., fulfillment_status. This key will have four values:  *   Ready to Pack,  *   Packed *   Added to Picklist *   Picked up         #### Path:  | **EXAMPLE** | | --- | | [https://apiv2.shiprocket.in/v1/external/orders/show/16167171](https://apiv2.shiprocket.in/v1/external/orders/show/16167171) |
         * @summary Get Specific Order Details
         * @param {string} id 
         * @param {string} contentType 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExternalOrdersShowIdGet(id: string, contentType: string, authorization: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20011>> {
            const localVarAxiosArgs = await OrdersApiAxiosParamCreator(configuration).v1ExternalOrdersShowIdGet(id, contentType, authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get the order and shipment details of a particular order through this API by passing the Shiprocket order_id in the endpoint URL itself — type in your order_id in place of {id}.  No other body parameters are required.  **Note:**  For SRF orders, you\'ll receive an extra parameter viz., fulfillment_status. This key will have four values:  *   Ready to Pack,  *   Packed *   Added to Picklist *   Picked up         #### Path:  | **EXAMPLE** | | --- | | [https://apiv2.shiprocket.in/v1/external/orders/show/16167171](https://apiv2.shiprocket.in/v1/external/orders/show/16167171) |
         * @summary Get Specific Order Details
         * @param {string} id 
         * @param {string} contentType 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalOrdersShowIdGet(id: string, contentType: string, authorization: string, options?: any): AxiosPromise<InlineResponse20011> {
            return OrdersApiFp(configuration).v1ExternalOrdersShowIdGet(id, contentType, authorization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersApi - interface
 * @export
 * @interface OrdersApi
 */
export interface OrdersApiInterface {
    /**
     * Get the order and shipment details of a particular order through this API by passing the Shiprocket order_id in the endpoint URL itself — type in your order_id in place of {id}.  No other body parameters are required.  **Note:**  For SRF orders, you\'ll receive an extra parameter viz., fulfillment_status. This key will have four values:  *   Ready to Pack,  *   Packed *   Added to Picklist *   Picked up         #### Path:  | **EXAMPLE** | | --- | | [https://apiv2.shiprocket.in/v1/external/orders/show/16167171](https://apiv2.shiprocket.in/v1/external/orders/show/16167171) |
     * @summary Get Specific Order Details
     * @param {string} id 
     * @param {string} contentType 
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    v1ExternalOrdersShowIdGet(id: string, contentType: string, authorization: string, options?: any): AxiosPromise<InlineResponse20011>;

}

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI implements OrdersApiInterface {
    /**
     * Get the order and shipment details of a particular order through this API by passing the Shiprocket order_id in the endpoint URL itself — type in your order_id in place of {id}.  No other body parameters are required.  **Note:**  For SRF orders, you\'ll receive an extra parameter viz., fulfillment_status. This key will have four values:  *   Ready to Pack,  *   Packed *   Added to Picklist *   Picked up         #### Path:  | **EXAMPLE** | | --- | | [https://apiv2.shiprocket.in/v1/external/orders/show/16167171](https://apiv2.shiprocket.in/v1/external/orders/show/16167171) |
     * @summary Get Specific Order Details
     * @param {string} id 
     * @param {string} contentType 
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public v1ExternalOrdersShowIdGet(id: string, contentType: string, authorization: string, options?: any) {
        return OrdersApiFp(this.configuration).v1ExternalOrdersShowIdGet(id, contentType, authorization, options).then((request) => request(this.axios, this.basePath));
    }

}
