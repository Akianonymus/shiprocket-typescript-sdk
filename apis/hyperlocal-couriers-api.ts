// tslint:disable
/**
 * shiprocket
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InlineResponse2009 } from '../models';
// @ts-ignore
import { InlineResponse403 } from '../models';
// @ts-ignore
import { InlineResponse4225 } from '../models';
// @ts-ignore
import { InlineResponse4226 } from '../models';
/**
 * HyperlocalCouriersApi - axios parameter creator
 * @export
 */
export const HyperlocalCouriersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API can be used to assign the AWB (Air Waybill Number) to your shipment. The AWB is a unique number that helps you track the shipment and get details about it.  #### Parameters:  |  **PARAMS**  | **REQUIRED**  |  **DATA TYPE**  |                                                     **DESCRIPTION**                                                     | **EXAMPLE**  | |:-----------: |:------------: |:--------------: |:----------------------------------------------------------------------------------------------------------------------: |:-----------: | | `shipment_id`  |      YES      |    *integer*    |                              The shipment id of the order you want to create the AWB for.                                |   16016920   | |  `courier_id`  |      NO       |    *integer*    |  The courier id of the courier service you want to select. The default courier is selected in case no id is specified.  |      10      | |    `status`    |      NO       |    *string*     |     Use this to change the courier of a shipment. Value: reassign.  Note that this can be done only once in 24 hours.    |   reassign   |
         * @summary Generate AWB for Shipment
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalCourierAssignAwbPost: async (body?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/external/courier/assign/awb`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'text/plain';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to check the availability of couriers between the pickup and delivery postal codes.   Further details like the estimated time of delivery, the rates along with the ids are also shown.  **Note:**  - One of either the \'order_id\' or \'cod\' and \'weight\' is required. If you specify the order id, the cod and weight fields are not required and vice versa.      - You can add further fields to add the shipment details and filter the search.       #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `pickup_postcode` | YES | _integer_ | Postcode from where the order will be picked. | 110030 | | `delivery_postcode` | YES | _integer_ | Postcode where the order will be delivered | 122002 | | `order_id` | NO | _integer_ | If order id is already created in Shiprocket panel then you can use this shiprocket order id in servicibility | 123456 | | `cod` | CONDITIONAL YES | _boolean_ | 1 for Cash on Delivery and 0 for Prepaid orders. | 1 | | `is_new_hyperlocal` | YES | _boolean_ | 1 in case of hyper-local shipments | 1 | | `lat_from` | YES | _float_ | Pickup Latitude. Mandatory in case of Hyper local shipments | 28.509223937988 | | `long_from` | YES | _float_ | Pickup Longitude. Mandatory in case of Hyper local shipments | 77.067848205566 | | `lat_to` | YES | _float_ | Delivery Latitude. Mandatory in case of Hyper local shipments | 28.50724220275879 | | `long_to` | YES | _float_ | Delivery Longitude. Mandatory in case of Hyper local shipments | 77.06745147705078 |
         * @summary Check Courier Serviceability
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalCourierServiceabilityGet: async (contentType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling v1ExternalCourierServiceabilityGet.');
            }
            const localVarPath = `/v1/external/courier/serviceability/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HyperlocalCouriersApi - functional programming interface
 * @export
 */
export const HyperlocalCouriersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This API can be used to assign the AWB (Air Waybill Number) to your shipment. The AWB is a unique number that helps you track the shipment and get details about it.  #### Parameters:  |  **PARAMS**  | **REQUIRED**  |  **DATA TYPE**  |                                                     **DESCRIPTION**                                                     | **EXAMPLE**  | |:-----------: |:------------: |:--------------: |:----------------------------------------------------------------------------------------------------------------------: |:-----------: | | `shipment_id`  |      YES      |    *integer*    |                              The shipment id of the order you want to create the AWB for.                                |   16016920   | |  `courier_id`  |      NO       |    *integer*    |  The courier id of the courier service you want to select. The default courier is selected in case no id is specified.  |      10      | |    `status`    |      NO       |    *string*     |     Use this to change the courier of a shipment. Value: reassign.  Note that this can be done only once in 24 hours.    |   reassign   |
         * @summary Generate AWB for Shipment
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExternalCourierAssignAwbPost(body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await HyperlocalCouriersApiAxiosParamCreator(configuration).v1ExternalCourierAssignAwbPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Use this API to check the availability of couriers between the pickup and delivery postal codes.   Further details like the estimated time of delivery, the rates along with the ids are also shown.  **Note:**  - One of either the \'order_id\' or \'cod\' and \'weight\' is required. If you specify the order id, the cod and weight fields are not required and vice versa.      - You can add further fields to add the shipment details and filter the search.       #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `pickup_postcode` | YES | _integer_ | Postcode from where the order will be picked. | 110030 | | `delivery_postcode` | YES | _integer_ | Postcode where the order will be delivered | 122002 | | `order_id` | NO | _integer_ | If order id is already created in Shiprocket panel then you can use this shiprocket order id in servicibility | 123456 | | `cod` | CONDITIONAL YES | _boolean_ | 1 for Cash on Delivery and 0 for Prepaid orders. | 1 | | `is_new_hyperlocal` | YES | _boolean_ | 1 in case of hyper-local shipments | 1 | | `lat_from` | YES | _float_ | Pickup Latitude. Mandatory in case of Hyper local shipments | 28.509223937988 | | `long_from` | YES | _float_ | Pickup Longitude. Mandatory in case of Hyper local shipments | 77.067848205566 | | `lat_to` | YES | _float_ | Delivery Latitude. Mandatory in case of Hyper local shipments | 28.50724220275879 | | `long_to` | YES | _float_ | Delivery Longitude. Mandatory in case of Hyper local shipments | 77.06745147705078 |
         * @summary Check Courier Serviceability
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExternalCourierServiceabilityGet(contentType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2009>> {
            const localVarAxiosArgs = await HyperlocalCouriersApiAxiosParamCreator(configuration).v1ExternalCourierServiceabilityGet(contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HyperlocalCouriersApi - factory interface
 * @export
 */
export const HyperlocalCouriersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This API can be used to assign the AWB (Air Waybill Number) to your shipment. The AWB is a unique number that helps you track the shipment and get details about it.  #### Parameters:  |  **PARAMS**  | **REQUIRED**  |  **DATA TYPE**  |                                                     **DESCRIPTION**                                                     | **EXAMPLE**  | |:-----------: |:------------: |:--------------: |:----------------------------------------------------------------------------------------------------------------------: |:-----------: | | `shipment_id`  |      YES      |    *integer*    |                              The shipment id of the order you want to create the AWB for.                                |   16016920   | |  `courier_id`  |      NO       |    *integer*    |  The courier id of the courier service you want to select. The default courier is selected in case no id is specified.  |      10      | |    `status`    |      NO       |    *string*     |     Use this to change the courier of a shipment. Value: reassign.  Note that this can be done only once in 24 hours.    |   reassign   |
         * @summary Generate AWB for Shipment
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalCourierAssignAwbPost(body?: string, options?: any): AxiosPromise<object> {
            return HyperlocalCouriersApiFp(configuration).v1ExternalCourierAssignAwbPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to check the availability of couriers between the pickup and delivery postal codes.   Further details like the estimated time of delivery, the rates along with the ids are also shown.  **Note:**  - One of either the \'order_id\' or \'cod\' and \'weight\' is required. If you specify the order id, the cod and weight fields are not required and vice versa.      - You can add further fields to add the shipment details and filter the search.       #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `pickup_postcode` | YES | _integer_ | Postcode from where the order will be picked. | 110030 | | `delivery_postcode` | YES | _integer_ | Postcode where the order will be delivered | 122002 | | `order_id` | NO | _integer_ | If order id is already created in Shiprocket panel then you can use this shiprocket order id in servicibility | 123456 | | `cod` | CONDITIONAL YES | _boolean_ | 1 for Cash on Delivery and 0 for Prepaid orders. | 1 | | `is_new_hyperlocal` | YES | _boolean_ | 1 in case of hyper-local shipments | 1 | | `lat_from` | YES | _float_ | Pickup Latitude. Mandatory in case of Hyper local shipments | 28.509223937988 | | `long_from` | YES | _float_ | Pickup Longitude. Mandatory in case of Hyper local shipments | 77.067848205566 | | `lat_to` | YES | _float_ | Delivery Latitude. Mandatory in case of Hyper local shipments | 28.50724220275879 | | `long_to` | YES | _float_ | Delivery Longitude. Mandatory in case of Hyper local shipments | 77.06745147705078 |
         * @summary Check Courier Serviceability
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalCourierServiceabilityGet(contentType: string, options?: any): AxiosPromise<InlineResponse2009> {
            return HyperlocalCouriersApiFp(configuration).v1ExternalCourierServiceabilityGet(contentType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HyperlocalCouriersApi - interface
 * @export
 * @interface HyperlocalCouriersApi
 */
export interface HyperlocalCouriersApiInterface {
    /**
     * This API can be used to assign the AWB (Air Waybill Number) to your shipment. The AWB is a unique number that helps you track the shipment and get details about it.  #### Parameters:  |  **PARAMS**  | **REQUIRED**  |  **DATA TYPE**  |                                                     **DESCRIPTION**                                                     | **EXAMPLE**  | |:-----------: |:------------: |:--------------: |:----------------------------------------------------------------------------------------------------------------------: |:-----------: | | `shipment_id`  |      YES      |    *integer*    |                              The shipment id of the order you want to create the AWB for.                                |   16016920   | |  `courier_id`  |      NO       |    *integer*    |  The courier id of the courier service you want to select. The default courier is selected in case no id is specified.  |      10      | |    `status`    |      NO       |    *string*     |     Use this to change the courier of a shipment. Value: reassign.  Note that this can be done only once in 24 hours.    |   reassign   |
     * @summary Generate AWB for Shipment
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HyperlocalCouriersApiInterface
     */
    v1ExternalCourierAssignAwbPost(body?: string, options?: any): AxiosPromise<object>;

    /**
     * Use this API to check the availability of couriers between the pickup and delivery postal codes.   Further details like the estimated time of delivery, the rates along with the ids are also shown.  **Note:**  - One of either the \'order_id\' or \'cod\' and \'weight\' is required. If you specify the order id, the cod and weight fields are not required and vice versa.      - You can add further fields to add the shipment details and filter the search.       #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `pickup_postcode` | YES | _integer_ | Postcode from where the order will be picked. | 110030 | | `delivery_postcode` | YES | _integer_ | Postcode where the order will be delivered | 122002 | | `order_id` | NO | _integer_ | If order id is already created in Shiprocket panel then you can use this shiprocket order id in servicibility | 123456 | | `cod` | CONDITIONAL YES | _boolean_ | 1 for Cash on Delivery and 0 for Prepaid orders. | 1 | | `is_new_hyperlocal` | YES | _boolean_ | 1 in case of hyper-local shipments | 1 | | `lat_from` | YES | _float_ | Pickup Latitude. Mandatory in case of Hyper local shipments | 28.509223937988 | | `long_from` | YES | _float_ | Pickup Longitude. Mandatory in case of Hyper local shipments | 77.067848205566 | | `lat_to` | YES | _float_ | Delivery Latitude. Mandatory in case of Hyper local shipments | 28.50724220275879 | | `long_to` | YES | _float_ | Delivery Longitude. Mandatory in case of Hyper local shipments | 77.06745147705078 |
     * @summary Check Courier Serviceability
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HyperlocalCouriersApiInterface
     */
    v1ExternalCourierServiceabilityGet(contentType: string, options?: any): AxiosPromise<InlineResponse2009>;

}

/**
 * HyperlocalCouriersApi - object-oriented interface
 * @export
 * @class HyperlocalCouriersApi
 * @extends {BaseAPI}
 */
export class HyperlocalCouriersApi extends BaseAPI implements HyperlocalCouriersApiInterface {
    /**
     * This API can be used to assign the AWB (Air Waybill Number) to your shipment. The AWB is a unique number that helps you track the shipment and get details about it.  #### Parameters:  |  **PARAMS**  | **REQUIRED**  |  **DATA TYPE**  |                                                     **DESCRIPTION**                                                     | **EXAMPLE**  | |:-----------: |:------------: |:--------------: |:----------------------------------------------------------------------------------------------------------------------: |:-----------: | | `shipment_id`  |      YES      |    *integer*    |                              The shipment id of the order you want to create the AWB for.                                |   16016920   | |  `courier_id`  |      NO       |    *integer*    |  The courier id of the courier service you want to select. The default courier is selected in case no id is specified.  |      10      | |    `status`    |      NO       |    *string*     |     Use this to change the courier of a shipment. Value: reassign.  Note that this can be done only once in 24 hours.    |   reassign   |
     * @summary Generate AWB for Shipment
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HyperlocalCouriersApi
     */
    public v1ExternalCourierAssignAwbPost(body?: string, options?: any) {
        return HyperlocalCouriersApiFp(this.configuration).v1ExternalCourierAssignAwbPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to check the availability of couriers between the pickup and delivery postal codes.   Further details like the estimated time of delivery, the rates along with the ids are also shown.  **Note:**  - One of either the \'order_id\' or \'cod\' and \'weight\' is required. If you specify the order id, the cod and weight fields are not required and vice versa.      - You can add further fields to add the shipment details and filter the search.       #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `pickup_postcode` | YES | _integer_ | Postcode from where the order will be picked. | 110030 | | `delivery_postcode` | YES | _integer_ | Postcode where the order will be delivered | 122002 | | `order_id` | NO | _integer_ | If order id is already created in Shiprocket panel then you can use this shiprocket order id in servicibility | 123456 | | `cod` | CONDITIONAL YES | _boolean_ | 1 for Cash on Delivery and 0 for Prepaid orders. | 1 | | `is_new_hyperlocal` | YES | _boolean_ | 1 in case of hyper-local shipments | 1 | | `lat_from` | YES | _float_ | Pickup Latitude. Mandatory in case of Hyper local shipments | 28.509223937988 | | `long_from` | YES | _float_ | Pickup Longitude. Mandatory in case of Hyper local shipments | 77.067848205566 | | `lat_to` | YES | _float_ | Delivery Latitude. Mandatory in case of Hyper local shipments | 28.50724220275879 | | `long_to` | YES | _float_ | Delivery Longitude. Mandatory in case of Hyper local shipments | 77.06745147705078 |
     * @summary Check Courier Serviceability
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HyperlocalCouriersApi
     */
    public v1ExternalCourierServiceabilityGet(contentType: string, options?: any) {
        return HyperlocalCouriersApiFp(this.configuration).v1ExternalCourierServiceabilityGet(contentType, options).then((request) => request(this.axios, this.basePath));
    }

}
