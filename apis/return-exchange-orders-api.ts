// tslint:disable
/**
 * shiprocket
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InlineObject3 } from '../models';
// @ts-ignore
import { InlineResponse20013 } from '../models';
// @ts-ignore
import { InlineResponse20014 } from '../models';
// @ts-ignore
import { InlineResponse20015 } from '../models';
// @ts-ignore
import { InlineResponse20016 } from '../models';
// @ts-ignore
import { InlineResponse403 } from '../models';
// @ts-ignore
import { InlineResponse4227 } from '../models';
/**
 * ReturnExchangeOrdersApi - axios parameter creator
 * @export
 */
export const ReturnExchangeOrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this API to create a new exchange order in your Shiprocket panel. Exchange orders are created in case the buyer needs to replace an item due to reasons such as size mismatch, wrong product received, or defective product. This API helps sellers seamlessly process exchange requests while ensuring the correct quality checks and logistics handling  #### Parameters:  | PARAMS | REQUIRED | DATA TYPE | DESCRIPTION | EXAMPLE | | --- | --- | --- | --- | --- | | `exchange_order_id` | YES | _String_ | Unique ID for the exchange order | EX_TEST002 | | `seller_pickup_location_id` | YES | _String_ | Pickup location ID of the seller | 5723898 | | `seller_shipping_location_id` | YES | _String_ | Shipping location ID of the seller | 5723898 | | `return_order_id` | YES | _String_ | Unique ID for the return order | R_TEST002 | | `order_date` | YES | _Date_ | Date of order placement (YYYY-MM-DD) | 2024-12-10 | | `payment_method` | YES | _String_ | Payment method used for the order | prepaid | | `buyer_shipping_first_name` | YES | _String_ | First name of the shipping buyer | Test | | `buyer_shipping_last_name` | NO | _String_ | Last name of the shipping buyer | Test | | `buyer_shipping_email` | NO | _String_ | Email of the shipping buyer (valid email format) | [test@gmail.com](https://null) | | `buyer_shipping_address` | YES | _String_ | Full address of the shipping buyer | dkalsd | | `buyer_shipping_address_2` | NO | _String_ | Additional address details |  | | `buyer_shipping_city` | YES | _String_ | City of the shipping buyer | South West Delhi | | `buyer_shipping_state` | YES | _String_ | State of the shipping buyer | Delhi | | `buyer_shipping_country` | YES | _String_ | Country of the shipping buyer | India | | `buyer_shipping_pincode` | YES | _String_ | Pincode of the shipping address | 110045 | | `buyer_shipping_phone` | YES | _String_ | Contact number of the shipping buyer (10 digits) | 9716414139 | | `buyer_pickup_first_name` | YES | _String_ | First name of the pickup buyer | Test | | `buyer_pickup_last_name` | NO | _String_ | Last name of the pickup buyer | Test | | `buyer_pickup_email` | NO | _String_ | Email of the pickup buyer | [test@gmail.com](https://null) | | `buyer_pickup_address` | YES | _String_ | Full address of the pickup buyer | Test | | `buyer_pickup_address_2` | NO | _String_ | Additional pickup address details |  | | `buyer_pickup_city` | YES | _String_ | City of the pickup buyer | South West Delhi | | `buyer_pickup_state` | YES | _String_ | State of the pickup buyer | Delhi | | `buyer_pickup_country` | YES | _String_ | Country of the pickup buyer | India | | `buyer_pickup_pincode` | YES | _String_ | Pincode of the pickup address | 110045 | | `buyer_pickup_phone` | YES | _String_ | Contact number of the pickup buyer (10 digits) | 9716414139 | | `order_items` | YES | _Array_ | List of items in the order |  | | `order_items[].name` | YES | _String_ | Name of the product | Black tshirt XL | | `order_items[].selling_price` | YES | _Float_ | Price of the product | 500.00 | | `order_items[].units` | YES | _Integer_ | Quantity of the product | 1 | | `order_items[].hsn` | YES | _String_ | HSN code of the product | 1733808730720 | | `order_items[].sku` | YES | _String_ | SKU of the product | mackbook | | `order_items[].tax` | NO | _Float_ | Tax amount |  | | `order_items[].discount` | NO | _Float_ | Discount on the product |  | | `order_items[].exchange_item_id` | NO | _String_ | Exchange item ID | 193658024 | | `order_items[].exchange_item_name` | YES | _String_ | Exchange item name | Black tshirt XL | | `order_items[].exchange_item_sku` | YES | _String_ | Exchange item SKU | mackbook | | `sub_total` | YES | _Float_ | Subtotal amount | 500.00 | | `shipping_charges` | NO | _Float_ | Shipping charges |  | | `giftwrap_charges` | NO | _Float_ | Gift wrapping charges |  | | `total_discount` | NO | _Float_ | Total discount on the order | 0 | | `transaction_charges` | NO | _Float_ | Transaction charges |  | | `return_length` | YES | _Float_ | Return package length (cm) | 10.00 | | `return_breadth` | YES | _Float_ | Return package breadth (cm) | 10.00 | | `return_height` | YES | _Float_ | Return package height (cm) | 10.00 | | `return_weight` | YES | _Float_ | Return package weight (kg) | 0.500 | | `exchange_length` | YES | _Float_ | Exchange package length (cm) | 11.00 | | `exchange_breadth` | YES | _Float_ | Exchange package breadth (cm) | 11.00 | | `exchange_height` | YES | _Float_ | Exchange package height (cm) | 11.00 | | `exchange_weight` | YES | _Float_ | Exchange package weight (kg) | 11.00 | | `return_reason` | YES | _String_ | Reason for return | 29 |
         * @summary Create Exchange Order
         * @param {string} contentType 
         * @param {string} authorization 
         * @param {InlineObject3} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalOrdersCreateExchangePost: async (contentType: string, authorization: string, inlineObject3?: InlineObject3, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling v1ExternalOrdersCreateExchangePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v1ExternalOrdersCreateExchangePost.');
            }
            const localVarPath = `/v1/external/orders/create/exchange`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject3 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject3 !== undefined ? inlineObject3 : {}) : (inlineObject3 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to create a new return order in your Shiprocket panel. Return orders are created in case the buyer refuses/rejects/returns a specific order.   The parameter specifications are the same as the custom order API, with a few exceptions.  #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `order_id` | YES | _string_ | The order id you want to specify to the order. Max char: 50. (Avoid passing character values as this contradicts some other API calls) | 99711997 | | `order_date` | YES | _string_ | The date of order creation in yyyy-mm-dd format. Time is an additional option. | 2019-08-05 | | `channel_id` | NO | _integer_ | Id of the desired channel where the order is to be placed. \'Custom\' channel id is selected in case parameter is not filled. | 768903 | | `pickup_customer_name` | YES | _string_ | The customer’s first name. | John | | `pickup_last_name` | NO | _string_ | The customer’s last name. | Doe | | `pickup_address` | YES | _string_ | The customer\'s primary address. | 416, Udyog Vihar III, Sector 20 | | `pickup_address_2` | NO | _string_ | Additional customer address details. | DDA | | `pickup_city` | YES | _string_ | The customer\'s city name. | Delhi | | `pickup_state` | YES | _string_ | The customer\'s state. | New Delhi | | `pickup_country` | YES | _string_ | Customer\'s country name. | India | | `pickup_pincode` | YES | _integer_ | Pincode of the customer address. | 110002 | | `pickup_email` | YES | _string_ | Customer\'s email address. | [john@doe.com](https://mailto:john@doe.com) | | `pickup_phone` | YES | _string_ | Customer\'s phone number. | 9999999999 | | `pickup_isd_code` | NO | _string_ | ISD code. | 91 | | `shipping_customer_name` | YES | _string_ | The name of the seller the package is shipped back to. | Jane | | `shipping_last_name` | NO | _string_ | The last name of the seller. | Doe | | `shipping_address` | YES | _string_ | The address the package is shipped to. | Castle | | `shipping_address_2` | NO | _string_ | Further shipping address details. | Bridge | | `shipping_city` | YES | _string_ | The shipping address city. | Mumbai | | `shipping_country` | YES | _string_ | The shipping address country. | India | | `shipping_pincode` | YES | _integer_ | The shipping pincode. | 220022 | | `shipping_state` | YES | _string_ | Shipping address state. | Maharashtra | | `shipping_email` | NO | _string_ | The email of the seller the package is shipped to. | [jane@doe.com](https://mailto:jane@doe.com) | | `shipping_isd_code` | NO | _string_ | The shipping isd code. | 91 | | `shipping_phone` | YES | _integer_ | Phone no. of the shipping customer | 8888888888 | | `order_items` | YES | / | Array containing further fields. | / | | `name` | YES | _string_ | Name of the product. | ball123 | | `sku` | YES | _string_ | The sku id of the product. | Tennis Ball | | `units` | YES | _integer_ | No of units that are to be shipped. | 1 | | `selling_price` | YES | _integer_ | The selling price per unit in Rupee. Inclusive of GST. | 10 | | `discount` | NO | _integer_ | The discount amount in Rupee. Inclusive of tax. | 0 | | `hsn` | NO | _string_ | Harmonised System Nomenclature code. Used to determine the category of taxation the goods fall under. | 4412 | | `return_reason` | NO | _string_ | Bought by Mistake, Both product and shipping box damaged | Please refer to the \"Possible return_reason values\" section | | `qc_enable` | CONDITIONAL YES | _string_ | If True, QC will be performed for that product and QC will be performed only for a single SKU per order | true/false | | `qc_color` | NO | _varchar(180)_ | The color of the product can be passed in this parameter | Red | | `qc_brand` | NO | _varchar(255)_ | The brand of the product can be passed in this parameter | 768903 | | `qc_serial_no` | NO | _varchar(255)_ | The serial number of the product can be passed in this parameter | T13123124 | | `qc_ean_barcode` | NO | _varchar(255)_ | EAN/Barcode of the product can be passed in this parameter | QWRE123 | | `qc_size` | NO | _varchar(180)_ | The size of the product can be passed in this parameter | 8 | | `qc_product_name` | CONDITIONAL YES | _varchar(255)_ | If qc_enable set True, then Product name should be passed in this parameter | Shoes | | `qc_product_image` | CONDITIONAL YES | _varchar(255)_ | If qc_enable set True, then Product image should be passed in this parameter (only png/jpg format supported) | [https://s3-ap-southeast-1.amazonaws.com/kr-multichannel/1636713733zxja.png](https://s3-ap-southeast-1.amazonaws.com/kr-multichannel/1636713733zxja.png) | | `qc_product_imei` | NO | _varchar(255)_ | IMEI of the device | 398612387501872509 | | `qc_brand_tag` | NO | _boolean_ | Eligible Categories : Selective like Footwear, Apparels  <br>The pickup agent will cross-check the provided brand name, which should match the brand tag affixed to the item(s) upon delivery. Can be either 0 or 1 | 1 | | `qc_used_check` | NO | _boolean_ | Eligible Product Categories : All  <br>The pickup agent will check the product being handed over for clear signs of usage. Can be either 0 or 1 | 0 | | `qc_sealtag_check` | NO | _boolean_ | Eligible Product Categories : All  <br>The pickup agent will check if the seal tag is intact in the products received from the buyer. Can be either 0 or 1 | 1 | | `qc_check_damaged_product` | NO | _string_ | Eligible Product Categories : All  <br>The pickup agent will check the product for any signs of damages. Can be either yes or no | yes | | `payment_method` | YES | _string_ | The method of payment. This should always be prepaid. | Prepaid | | `total_discount` | NO | _string_ | The total discount amount in Rupee. | 0 | | `sub_total` | YES | _integer_ | Calculated sub total amount in Rupee after deductions. | 10 | | `length` | YES | _float_ | The length of the shipment in cms. | 10 | | `breadth` | YES | _float_ | The breadth of the shipment in cms. | 15 | | `height` | YES | _float_ | The height of the shipment in cms. | 20 | | `weight` | YES | _float_ | The shipment weight in kgs. | 1 |  #### <u><b>Possible return_reason values</b></u><u>:</u>  ``` 1. Bought by Mistake 2. Better price available 3. Performance or quality not adequate 4. Incompatible or not useful 5. Product damaged, but shipping box OK 6. Item arrived too late 7. Missing parts or accessories 8. Both product and shipping box damaged 9. Wrong item was sent 10. Item defective or doesn\'t work 11. No longer needed 12. Didn\'t approve purchase 13. Inaccurate website description 14. Return against replacement 15. Delay Refund 16. Delivered Late 17. Product does not Match Description on Website 18. Both Product & Outer Box Damaged 19. Defective or does not work 20. Product damaged, but outer Box OK 21. Missing Parts or Accessories 22. Incorrect Item Delivered 23. Product Defective or Doesn\'t Work 24. Product performance/quality is not up to my expectations 25. Other 26. Changed my mind 27. Does not fit 28. Size not as expected 29. Item is damaged 30. Received wrong item 31. Parcel damaged on arrival 32. Quality not as expected 33. Missing Item or accessories 34. Performance not adequate 35. Not as described 36. Arrived too late 37. Order Not Received 38. Empty Package 39. Wrong item or Wrong colour was sent 40. Item defective, expired, spoilt or does not work 41. Items or parts missing 42. Size or Quantity issues 43. Status as delivered but order not received 44. N/A   ```
         * @summary Create a Return Order
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalOrdersCreateReturnPost: async (body?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/external/orders/create/return`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'text/plain';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to update your return orders. Please specify the parameters based on the \"action\" key.  #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `order_id` | YES | _string_ | Your return order ID | R_1231234 | | `action` | YES | _string_ | Pass array of action. Allowed actions:  <br>`1. product_details: Allows you to edit the weight and dimensions`  <br>`2. warehouse_address: Allows you to change the return address` | \"action\": \\[\"product_details\"\\] | | `length` | CONDITIONAL YES | _float_ | The length of the item in cms. Must be more than 0.5 | 12 | | `breadth` | CONDITIONAL YES | _float_ | The breadth of the item in cms. Must be more than 0.5 | 23 | | `height` | CONDITIONAL YES | _float_ | The height of the item in cms. Must be more than 0.5 | 30 | | `weight` | CONDITIONAL YES | _float_ | The weight of the item in kgs. Must be more than 0. | 10 | | `return_warehouse_id` | CONDITIONAL YES | _integer_ | Id of pickup location | 213443 |
         * @summary Update Return Order
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalOrdersEditPost: async (body?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/external/orders/edit`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'text/plain';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Using this API, you can get a list of all created return orders in your Shiprocket account, along with their details.  No parameters are required to use the API. However, further parameters can be defined to sort and filter the data.  #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `page` | NO | _integer_ | The page number to display. | 1 | | `per_page` | NO | _integer_ | The number of orders per page. | 2 | | `to` | NO | _string_ | Ending date of search. | 2019-08-04 | | `from` | NO | _string_ | Starting date of search. | 2019-08-05 |
         * @summary Get All Return Orders
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalOrdersProcessingReturnGet: async (contentType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling v1ExternalOrdersProcessingReturnGet.');
            }
            const localVarPath = `/v1/external/orders/processing/return`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReturnExchangeOrdersApi - functional programming interface
 * @export
 */
export const ReturnExchangeOrdersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Use this API to create a new exchange order in your Shiprocket panel. Exchange orders are created in case the buyer needs to replace an item due to reasons such as size mismatch, wrong product received, or defective product. This API helps sellers seamlessly process exchange requests while ensuring the correct quality checks and logistics handling  #### Parameters:  | PARAMS | REQUIRED | DATA TYPE | DESCRIPTION | EXAMPLE | | --- | --- | --- | --- | --- | | `exchange_order_id` | YES | _String_ | Unique ID for the exchange order | EX_TEST002 | | `seller_pickup_location_id` | YES | _String_ | Pickup location ID of the seller | 5723898 | | `seller_shipping_location_id` | YES | _String_ | Shipping location ID of the seller | 5723898 | | `return_order_id` | YES | _String_ | Unique ID for the return order | R_TEST002 | | `order_date` | YES | _Date_ | Date of order placement (YYYY-MM-DD) | 2024-12-10 | | `payment_method` | YES | _String_ | Payment method used for the order | prepaid | | `buyer_shipping_first_name` | YES | _String_ | First name of the shipping buyer | Test | | `buyer_shipping_last_name` | NO | _String_ | Last name of the shipping buyer | Test | | `buyer_shipping_email` | NO | _String_ | Email of the shipping buyer (valid email format) | [test@gmail.com](https://null) | | `buyer_shipping_address` | YES | _String_ | Full address of the shipping buyer | dkalsd | | `buyer_shipping_address_2` | NO | _String_ | Additional address details |  | | `buyer_shipping_city` | YES | _String_ | City of the shipping buyer | South West Delhi | | `buyer_shipping_state` | YES | _String_ | State of the shipping buyer | Delhi | | `buyer_shipping_country` | YES | _String_ | Country of the shipping buyer | India | | `buyer_shipping_pincode` | YES | _String_ | Pincode of the shipping address | 110045 | | `buyer_shipping_phone` | YES | _String_ | Contact number of the shipping buyer (10 digits) | 9716414139 | | `buyer_pickup_first_name` | YES | _String_ | First name of the pickup buyer | Test | | `buyer_pickup_last_name` | NO | _String_ | Last name of the pickup buyer | Test | | `buyer_pickup_email` | NO | _String_ | Email of the pickup buyer | [test@gmail.com](https://null) | | `buyer_pickup_address` | YES | _String_ | Full address of the pickup buyer | Test | | `buyer_pickup_address_2` | NO | _String_ | Additional pickup address details |  | | `buyer_pickup_city` | YES | _String_ | City of the pickup buyer | South West Delhi | | `buyer_pickup_state` | YES | _String_ | State of the pickup buyer | Delhi | | `buyer_pickup_country` | YES | _String_ | Country of the pickup buyer | India | | `buyer_pickup_pincode` | YES | _String_ | Pincode of the pickup address | 110045 | | `buyer_pickup_phone` | YES | _String_ | Contact number of the pickup buyer (10 digits) | 9716414139 | | `order_items` | YES | _Array_ | List of items in the order |  | | `order_items[].name` | YES | _String_ | Name of the product | Black tshirt XL | | `order_items[].selling_price` | YES | _Float_ | Price of the product | 500.00 | | `order_items[].units` | YES | _Integer_ | Quantity of the product | 1 | | `order_items[].hsn` | YES | _String_ | HSN code of the product | 1733808730720 | | `order_items[].sku` | YES | _String_ | SKU of the product | mackbook | | `order_items[].tax` | NO | _Float_ | Tax amount |  | | `order_items[].discount` | NO | _Float_ | Discount on the product |  | | `order_items[].exchange_item_id` | NO | _String_ | Exchange item ID | 193658024 | | `order_items[].exchange_item_name` | YES | _String_ | Exchange item name | Black tshirt XL | | `order_items[].exchange_item_sku` | YES | _String_ | Exchange item SKU | mackbook | | `sub_total` | YES | _Float_ | Subtotal amount | 500.00 | | `shipping_charges` | NO | _Float_ | Shipping charges |  | | `giftwrap_charges` | NO | _Float_ | Gift wrapping charges |  | | `total_discount` | NO | _Float_ | Total discount on the order | 0 | | `transaction_charges` | NO | _Float_ | Transaction charges |  | | `return_length` | YES | _Float_ | Return package length (cm) | 10.00 | | `return_breadth` | YES | _Float_ | Return package breadth (cm) | 10.00 | | `return_height` | YES | _Float_ | Return package height (cm) | 10.00 | | `return_weight` | YES | _Float_ | Return package weight (kg) | 0.500 | | `exchange_length` | YES | _Float_ | Exchange package length (cm) | 11.00 | | `exchange_breadth` | YES | _Float_ | Exchange package breadth (cm) | 11.00 | | `exchange_height` | YES | _Float_ | Exchange package height (cm) | 11.00 | | `exchange_weight` | YES | _Float_ | Exchange package weight (kg) | 11.00 | | `return_reason` | YES | _String_ | Reason for return | 29 |
         * @summary Create Exchange Order
         * @param {string} contentType 
         * @param {string} authorization 
         * @param {InlineObject3} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExternalOrdersCreateExchangePost(contentType: string, authorization: string, inlineObject3?: InlineObject3, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20014>> {
            const localVarAxiosArgs = await ReturnExchangeOrdersApiAxiosParamCreator(configuration).v1ExternalOrdersCreateExchangePost(contentType, authorization, inlineObject3, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Use this API to create a new return order in your Shiprocket panel. Return orders are created in case the buyer refuses/rejects/returns a specific order.   The parameter specifications are the same as the custom order API, with a few exceptions.  #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `order_id` | YES | _string_ | The order id you want to specify to the order. Max char: 50. (Avoid passing character values as this contradicts some other API calls) | 99711997 | | `order_date` | YES | _string_ | The date of order creation in yyyy-mm-dd format. Time is an additional option. | 2019-08-05 | | `channel_id` | NO | _integer_ | Id of the desired channel where the order is to be placed. \'Custom\' channel id is selected in case parameter is not filled. | 768903 | | `pickup_customer_name` | YES | _string_ | The customer’s first name. | John | | `pickup_last_name` | NO | _string_ | The customer’s last name. | Doe | | `pickup_address` | YES | _string_ | The customer\'s primary address. | 416, Udyog Vihar III, Sector 20 | | `pickup_address_2` | NO | _string_ | Additional customer address details. | DDA | | `pickup_city` | YES | _string_ | The customer\'s city name. | Delhi | | `pickup_state` | YES | _string_ | The customer\'s state. | New Delhi | | `pickup_country` | YES | _string_ | Customer\'s country name. | India | | `pickup_pincode` | YES | _integer_ | Pincode of the customer address. | 110002 | | `pickup_email` | YES | _string_ | Customer\'s email address. | [john@doe.com](https://mailto:john@doe.com) | | `pickup_phone` | YES | _string_ | Customer\'s phone number. | 9999999999 | | `pickup_isd_code` | NO | _string_ | ISD code. | 91 | | `shipping_customer_name` | YES | _string_ | The name of the seller the package is shipped back to. | Jane | | `shipping_last_name` | NO | _string_ | The last name of the seller. | Doe | | `shipping_address` | YES | _string_ | The address the package is shipped to. | Castle | | `shipping_address_2` | NO | _string_ | Further shipping address details. | Bridge | | `shipping_city` | YES | _string_ | The shipping address city. | Mumbai | | `shipping_country` | YES | _string_ | The shipping address country. | India | | `shipping_pincode` | YES | _integer_ | The shipping pincode. | 220022 | | `shipping_state` | YES | _string_ | Shipping address state. | Maharashtra | | `shipping_email` | NO | _string_ | The email of the seller the package is shipped to. | [jane@doe.com](https://mailto:jane@doe.com) | | `shipping_isd_code` | NO | _string_ | The shipping isd code. | 91 | | `shipping_phone` | YES | _integer_ | Phone no. of the shipping customer | 8888888888 | | `order_items` | YES | / | Array containing further fields. | / | | `name` | YES | _string_ | Name of the product. | ball123 | | `sku` | YES | _string_ | The sku id of the product. | Tennis Ball | | `units` | YES | _integer_ | No of units that are to be shipped. | 1 | | `selling_price` | YES | _integer_ | The selling price per unit in Rupee. Inclusive of GST. | 10 | | `discount` | NO | _integer_ | The discount amount in Rupee. Inclusive of tax. | 0 | | `hsn` | NO | _string_ | Harmonised System Nomenclature code. Used to determine the category of taxation the goods fall under. | 4412 | | `return_reason` | NO | _string_ | Bought by Mistake, Both product and shipping box damaged | Please refer to the \"Possible return_reason values\" section | | `qc_enable` | CONDITIONAL YES | _string_ | If True, QC will be performed for that product and QC will be performed only for a single SKU per order | true/false | | `qc_color` | NO | _varchar(180)_ | The color of the product can be passed in this parameter | Red | | `qc_brand` | NO | _varchar(255)_ | The brand of the product can be passed in this parameter | 768903 | | `qc_serial_no` | NO | _varchar(255)_ | The serial number of the product can be passed in this parameter | T13123124 | | `qc_ean_barcode` | NO | _varchar(255)_ | EAN/Barcode of the product can be passed in this parameter | QWRE123 | | `qc_size` | NO | _varchar(180)_ | The size of the product can be passed in this parameter | 8 | | `qc_product_name` | CONDITIONAL YES | _varchar(255)_ | If qc_enable set True, then Product name should be passed in this parameter | Shoes | | `qc_product_image` | CONDITIONAL YES | _varchar(255)_ | If qc_enable set True, then Product image should be passed in this parameter (only png/jpg format supported) | [https://s3-ap-southeast-1.amazonaws.com/kr-multichannel/1636713733zxja.png](https://s3-ap-southeast-1.amazonaws.com/kr-multichannel/1636713733zxja.png) | | `qc_product_imei` | NO | _varchar(255)_ | IMEI of the device | 398612387501872509 | | `qc_brand_tag` | NO | _boolean_ | Eligible Categories : Selective like Footwear, Apparels  <br>The pickup agent will cross-check the provided brand name, which should match the brand tag affixed to the item(s) upon delivery. Can be either 0 or 1 | 1 | | `qc_used_check` | NO | _boolean_ | Eligible Product Categories : All  <br>The pickup agent will check the product being handed over for clear signs of usage. Can be either 0 or 1 | 0 | | `qc_sealtag_check` | NO | _boolean_ | Eligible Product Categories : All  <br>The pickup agent will check if the seal tag is intact in the products received from the buyer. Can be either 0 or 1 | 1 | | `qc_check_damaged_product` | NO | _string_ | Eligible Product Categories : All  <br>The pickup agent will check the product for any signs of damages. Can be either yes or no | yes | | `payment_method` | YES | _string_ | The method of payment. This should always be prepaid. | Prepaid | | `total_discount` | NO | _string_ | The total discount amount in Rupee. | 0 | | `sub_total` | YES | _integer_ | Calculated sub total amount in Rupee after deductions. | 10 | | `length` | YES | _float_ | The length of the shipment in cms. | 10 | | `breadth` | YES | _float_ | The breadth of the shipment in cms. | 15 | | `height` | YES | _float_ | The height of the shipment in cms. | 20 | | `weight` | YES | _float_ | The shipment weight in kgs. | 1 |  #### <u><b>Possible return_reason values</b></u><u>:</u>  ``` 1. Bought by Mistake 2. Better price available 3. Performance or quality not adequate 4. Incompatible or not useful 5. Product damaged, but shipping box OK 6. Item arrived too late 7. Missing parts or accessories 8. Both product and shipping box damaged 9. Wrong item was sent 10. Item defective or doesn\'t work 11. No longer needed 12. Didn\'t approve purchase 13. Inaccurate website description 14. Return against replacement 15. Delay Refund 16. Delivered Late 17. Product does not Match Description on Website 18. Both Product & Outer Box Damaged 19. Defective or does not work 20. Product damaged, but outer Box OK 21. Missing Parts or Accessories 22. Incorrect Item Delivered 23. Product Defective or Doesn\'t Work 24. Product performance/quality is not up to my expectations 25. Other 26. Changed my mind 27. Does not fit 28. Size not as expected 29. Item is damaged 30. Received wrong item 31. Parcel damaged on arrival 32. Quality not as expected 33. Missing Item or accessories 34. Performance not adequate 35. Not as described 36. Arrived too late 37. Order Not Received 38. Empty Package 39. Wrong item or Wrong colour was sent 40. Item defective, expired, spoilt or does not work 41. Items or parts missing 42. Size or Quantity issues 43. Status as delivered but order not received 44. N/A   ```
         * @summary Create a Return Order
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExternalOrdersCreateReturnPost(body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20013>> {
            const localVarAxiosArgs = await ReturnExchangeOrdersApiAxiosParamCreator(configuration).v1ExternalOrdersCreateReturnPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Use this API to update your return orders. Please specify the parameters based on the \"action\" key.  #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `order_id` | YES | _string_ | Your return order ID | R_1231234 | | `action` | YES | _string_ | Pass array of action. Allowed actions:  <br>`1. product_details: Allows you to edit the weight and dimensions`  <br>`2. warehouse_address: Allows you to change the return address` | \"action\": \\[\"product_details\"\\] | | `length` | CONDITIONAL YES | _float_ | The length of the item in cms. Must be more than 0.5 | 12 | | `breadth` | CONDITIONAL YES | _float_ | The breadth of the item in cms. Must be more than 0.5 | 23 | | `height` | CONDITIONAL YES | _float_ | The height of the item in cms. Must be more than 0.5 | 30 | | `weight` | CONDITIONAL YES | _float_ | The weight of the item in kgs. Must be more than 0. | 10 | | `return_warehouse_id` | CONDITIONAL YES | _integer_ | Id of pickup location | 213443 |
         * @summary Update Return Order
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExternalOrdersEditPost(body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20015>> {
            const localVarAxiosArgs = await ReturnExchangeOrdersApiAxiosParamCreator(configuration).v1ExternalOrdersEditPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Using this API, you can get a list of all created return orders in your Shiprocket account, along with their details.  No parameters are required to use the API. However, further parameters can be defined to sort and filter the data.  #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `page` | NO | _integer_ | The page number to display. | 1 | | `per_page` | NO | _integer_ | The number of orders per page. | 2 | | `to` | NO | _string_ | Ending date of search. | 2019-08-04 | | `from` | NO | _string_ | Starting date of search. | 2019-08-05 |
         * @summary Get All Return Orders
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExternalOrdersProcessingReturnGet(contentType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20016>> {
            const localVarAxiosArgs = await ReturnExchangeOrdersApiAxiosParamCreator(configuration).v1ExternalOrdersProcessingReturnGet(contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ReturnExchangeOrdersApi - factory interface
 * @export
 */
export const ReturnExchangeOrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Use this API to create a new exchange order in your Shiprocket panel. Exchange orders are created in case the buyer needs to replace an item due to reasons such as size mismatch, wrong product received, or defective product. This API helps sellers seamlessly process exchange requests while ensuring the correct quality checks and logistics handling  #### Parameters:  | PARAMS | REQUIRED | DATA TYPE | DESCRIPTION | EXAMPLE | | --- | --- | --- | --- | --- | | `exchange_order_id` | YES | _String_ | Unique ID for the exchange order | EX_TEST002 | | `seller_pickup_location_id` | YES | _String_ | Pickup location ID of the seller | 5723898 | | `seller_shipping_location_id` | YES | _String_ | Shipping location ID of the seller | 5723898 | | `return_order_id` | YES | _String_ | Unique ID for the return order | R_TEST002 | | `order_date` | YES | _Date_ | Date of order placement (YYYY-MM-DD) | 2024-12-10 | | `payment_method` | YES | _String_ | Payment method used for the order | prepaid | | `buyer_shipping_first_name` | YES | _String_ | First name of the shipping buyer | Test | | `buyer_shipping_last_name` | NO | _String_ | Last name of the shipping buyer | Test | | `buyer_shipping_email` | NO | _String_ | Email of the shipping buyer (valid email format) | [test@gmail.com](https://null) | | `buyer_shipping_address` | YES | _String_ | Full address of the shipping buyer | dkalsd | | `buyer_shipping_address_2` | NO | _String_ | Additional address details |  | | `buyer_shipping_city` | YES | _String_ | City of the shipping buyer | South West Delhi | | `buyer_shipping_state` | YES | _String_ | State of the shipping buyer | Delhi | | `buyer_shipping_country` | YES | _String_ | Country of the shipping buyer | India | | `buyer_shipping_pincode` | YES | _String_ | Pincode of the shipping address | 110045 | | `buyer_shipping_phone` | YES | _String_ | Contact number of the shipping buyer (10 digits) | 9716414139 | | `buyer_pickup_first_name` | YES | _String_ | First name of the pickup buyer | Test | | `buyer_pickup_last_name` | NO | _String_ | Last name of the pickup buyer | Test | | `buyer_pickup_email` | NO | _String_ | Email of the pickup buyer | [test@gmail.com](https://null) | | `buyer_pickup_address` | YES | _String_ | Full address of the pickup buyer | Test | | `buyer_pickup_address_2` | NO | _String_ | Additional pickup address details |  | | `buyer_pickup_city` | YES | _String_ | City of the pickup buyer | South West Delhi | | `buyer_pickup_state` | YES | _String_ | State of the pickup buyer | Delhi | | `buyer_pickup_country` | YES | _String_ | Country of the pickup buyer | India | | `buyer_pickup_pincode` | YES | _String_ | Pincode of the pickup address | 110045 | | `buyer_pickup_phone` | YES | _String_ | Contact number of the pickup buyer (10 digits) | 9716414139 | | `order_items` | YES | _Array_ | List of items in the order |  | | `order_items[].name` | YES | _String_ | Name of the product | Black tshirt XL | | `order_items[].selling_price` | YES | _Float_ | Price of the product | 500.00 | | `order_items[].units` | YES | _Integer_ | Quantity of the product | 1 | | `order_items[].hsn` | YES | _String_ | HSN code of the product | 1733808730720 | | `order_items[].sku` | YES | _String_ | SKU of the product | mackbook | | `order_items[].tax` | NO | _Float_ | Tax amount |  | | `order_items[].discount` | NO | _Float_ | Discount on the product |  | | `order_items[].exchange_item_id` | NO | _String_ | Exchange item ID | 193658024 | | `order_items[].exchange_item_name` | YES | _String_ | Exchange item name | Black tshirt XL | | `order_items[].exchange_item_sku` | YES | _String_ | Exchange item SKU | mackbook | | `sub_total` | YES | _Float_ | Subtotal amount | 500.00 | | `shipping_charges` | NO | _Float_ | Shipping charges |  | | `giftwrap_charges` | NO | _Float_ | Gift wrapping charges |  | | `total_discount` | NO | _Float_ | Total discount on the order | 0 | | `transaction_charges` | NO | _Float_ | Transaction charges |  | | `return_length` | YES | _Float_ | Return package length (cm) | 10.00 | | `return_breadth` | YES | _Float_ | Return package breadth (cm) | 10.00 | | `return_height` | YES | _Float_ | Return package height (cm) | 10.00 | | `return_weight` | YES | _Float_ | Return package weight (kg) | 0.500 | | `exchange_length` | YES | _Float_ | Exchange package length (cm) | 11.00 | | `exchange_breadth` | YES | _Float_ | Exchange package breadth (cm) | 11.00 | | `exchange_height` | YES | _Float_ | Exchange package height (cm) | 11.00 | | `exchange_weight` | YES | _Float_ | Exchange package weight (kg) | 11.00 | | `return_reason` | YES | _String_ | Reason for return | 29 |
         * @summary Create Exchange Order
         * @param {string} contentType 
         * @param {string} authorization 
         * @param {InlineObject3} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalOrdersCreateExchangePost(contentType: string, authorization: string, inlineObject3?: InlineObject3, options?: any): AxiosPromise<InlineResponse20014> {
            return ReturnExchangeOrdersApiFp(configuration).v1ExternalOrdersCreateExchangePost(contentType, authorization, inlineObject3, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to create a new return order in your Shiprocket panel. Return orders are created in case the buyer refuses/rejects/returns a specific order.   The parameter specifications are the same as the custom order API, with a few exceptions.  #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `order_id` | YES | _string_ | The order id you want to specify to the order. Max char: 50. (Avoid passing character values as this contradicts some other API calls) | 99711997 | | `order_date` | YES | _string_ | The date of order creation in yyyy-mm-dd format. Time is an additional option. | 2019-08-05 | | `channel_id` | NO | _integer_ | Id of the desired channel where the order is to be placed. \'Custom\' channel id is selected in case parameter is not filled. | 768903 | | `pickup_customer_name` | YES | _string_ | The customer’s first name. | John | | `pickup_last_name` | NO | _string_ | The customer’s last name. | Doe | | `pickup_address` | YES | _string_ | The customer\'s primary address. | 416, Udyog Vihar III, Sector 20 | | `pickup_address_2` | NO | _string_ | Additional customer address details. | DDA | | `pickup_city` | YES | _string_ | The customer\'s city name. | Delhi | | `pickup_state` | YES | _string_ | The customer\'s state. | New Delhi | | `pickup_country` | YES | _string_ | Customer\'s country name. | India | | `pickup_pincode` | YES | _integer_ | Pincode of the customer address. | 110002 | | `pickup_email` | YES | _string_ | Customer\'s email address. | [john@doe.com](https://mailto:john@doe.com) | | `pickup_phone` | YES | _string_ | Customer\'s phone number. | 9999999999 | | `pickup_isd_code` | NO | _string_ | ISD code. | 91 | | `shipping_customer_name` | YES | _string_ | The name of the seller the package is shipped back to. | Jane | | `shipping_last_name` | NO | _string_ | The last name of the seller. | Doe | | `shipping_address` | YES | _string_ | The address the package is shipped to. | Castle | | `shipping_address_2` | NO | _string_ | Further shipping address details. | Bridge | | `shipping_city` | YES | _string_ | The shipping address city. | Mumbai | | `shipping_country` | YES | _string_ | The shipping address country. | India | | `shipping_pincode` | YES | _integer_ | The shipping pincode. | 220022 | | `shipping_state` | YES | _string_ | Shipping address state. | Maharashtra | | `shipping_email` | NO | _string_ | The email of the seller the package is shipped to. | [jane@doe.com](https://mailto:jane@doe.com) | | `shipping_isd_code` | NO | _string_ | The shipping isd code. | 91 | | `shipping_phone` | YES | _integer_ | Phone no. of the shipping customer | 8888888888 | | `order_items` | YES | / | Array containing further fields. | / | | `name` | YES | _string_ | Name of the product. | ball123 | | `sku` | YES | _string_ | The sku id of the product. | Tennis Ball | | `units` | YES | _integer_ | No of units that are to be shipped. | 1 | | `selling_price` | YES | _integer_ | The selling price per unit in Rupee. Inclusive of GST. | 10 | | `discount` | NO | _integer_ | The discount amount in Rupee. Inclusive of tax. | 0 | | `hsn` | NO | _string_ | Harmonised System Nomenclature code. Used to determine the category of taxation the goods fall under. | 4412 | | `return_reason` | NO | _string_ | Bought by Mistake, Both product and shipping box damaged | Please refer to the \"Possible return_reason values\" section | | `qc_enable` | CONDITIONAL YES | _string_ | If True, QC will be performed for that product and QC will be performed only for a single SKU per order | true/false | | `qc_color` | NO | _varchar(180)_ | The color of the product can be passed in this parameter | Red | | `qc_brand` | NO | _varchar(255)_ | The brand of the product can be passed in this parameter | 768903 | | `qc_serial_no` | NO | _varchar(255)_ | The serial number of the product can be passed in this parameter | T13123124 | | `qc_ean_barcode` | NO | _varchar(255)_ | EAN/Barcode of the product can be passed in this parameter | QWRE123 | | `qc_size` | NO | _varchar(180)_ | The size of the product can be passed in this parameter | 8 | | `qc_product_name` | CONDITIONAL YES | _varchar(255)_ | If qc_enable set True, then Product name should be passed in this parameter | Shoes | | `qc_product_image` | CONDITIONAL YES | _varchar(255)_ | If qc_enable set True, then Product image should be passed in this parameter (only png/jpg format supported) | [https://s3-ap-southeast-1.amazonaws.com/kr-multichannel/1636713733zxja.png](https://s3-ap-southeast-1.amazonaws.com/kr-multichannel/1636713733zxja.png) | | `qc_product_imei` | NO | _varchar(255)_ | IMEI of the device | 398612387501872509 | | `qc_brand_tag` | NO | _boolean_ | Eligible Categories : Selective like Footwear, Apparels  <br>The pickup agent will cross-check the provided brand name, which should match the brand tag affixed to the item(s) upon delivery. Can be either 0 or 1 | 1 | | `qc_used_check` | NO | _boolean_ | Eligible Product Categories : All  <br>The pickup agent will check the product being handed over for clear signs of usage. Can be either 0 or 1 | 0 | | `qc_sealtag_check` | NO | _boolean_ | Eligible Product Categories : All  <br>The pickup agent will check if the seal tag is intact in the products received from the buyer. Can be either 0 or 1 | 1 | | `qc_check_damaged_product` | NO | _string_ | Eligible Product Categories : All  <br>The pickup agent will check the product for any signs of damages. Can be either yes or no | yes | | `payment_method` | YES | _string_ | The method of payment. This should always be prepaid. | Prepaid | | `total_discount` | NO | _string_ | The total discount amount in Rupee. | 0 | | `sub_total` | YES | _integer_ | Calculated sub total amount in Rupee after deductions. | 10 | | `length` | YES | _float_ | The length of the shipment in cms. | 10 | | `breadth` | YES | _float_ | The breadth of the shipment in cms. | 15 | | `height` | YES | _float_ | The height of the shipment in cms. | 20 | | `weight` | YES | _float_ | The shipment weight in kgs. | 1 |  #### <u><b>Possible return_reason values</b></u><u>:</u>  ``` 1. Bought by Mistake 2. Better price available 3. Performance or quality not adequate 4. Incompatible or not useful 5. Product damaged, but shipping box OK 6. Item arrived too late 7. Missing parts or accessories 8. Both product and shipping box damaged 9. Wrong item was sent 10. Item defective or doesn\'t work 11. No longer needed 12. Didn\'t approve purchase 13. Inaccurate website description 14. Return against replacement 15. Delay Refund 16. Delivered Late 17. Product does not Match Description on Website 18. Both Product & Outer Box Damaged 19. Defective or does not work 20. Product damaged, but outer Box OK 21. Missing Parts or Accessories 22. Incorrect Item Delivered 23. Product Defective or Doesn\'t Work 24. Product performance/quality is not up to my expectations 25. Other 26. Changed my mind 27. Does not fit 28. Size not as expected 29. Item is damaged 30. Received wrong item 31. Parcel damaged on arrival 32. Quality not as expected 33. Missing Item or accessories 34. Performance not adequate 35. Not as described 36. Arrived too late 37. Order Not Received 38. Empty Package 39. Wrong item or Wrong colour was sent 40. Item defective, expired, spoilt or does not work 41. Items or parts missing 42. Size or Quantity issues 43. Status as delivered but order not received 44. N/A   ```
         * @summary Create a Return Order
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalOrdersCreateReturnPost(body?: string, options?: any): AxiosPromise<InlineResponse20013> {
            return ReturnExchangeOrdersApiFp(configuration).v1ExternalOrdersCreateReturnPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to update your return orders. Please specify the parameters based on the \"action\" key.  #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `order_id` | YES | _string_ | Your return order ID | R_1231234 | | `action` | YES | _string_ | Pass array of action. Allowed actions:  <br>`1. product_details: Allows you to edit the weight and dimensions`  <br>`2. warehouse_address: Allows you to change the return address` | \"action\": \\[\"product_details\"\\] | | `length` | CONDITIONAL YES | _float_ | The length of the item in cms. Must be more than 0.5 | 12 | | `breadth` | CONDITIONAL YES | _float_ | The breadth of the item in cms. Must be more than 0.5 | 23 | | `height` | CONDITIONAL YES | _float_ | The height of the item in cms. Must be more than 0.5 | 30 | | `weight` | CONDITIONAL YES | _float_ | The weight of the item in kgs. Must be more than 0. | 10 | | `return_warehouse_id` | CONDITIONAL YES | _integer_ | Id of pickup location | 213443 |
         * @summary Update Return Order
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalOrdersEditPost(body?: string, options?: any): AxiosPromise<InlineResponse20015> {
            return ReturnExchangeOrdersApiFp(configuration).v1ExternalOrdersEditPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Using this API, you can get a list of all created return orders in your Shiprocket account, along with their details.  No parameters are required to use the API. However, further parameters can be defined to sort and filter the data.  #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `page` | NO | _integer_ | The page number to display. | 1 | | `per_page` | NO | _integer_ | The number of orders per page. | 2 | | `to` | NO | _string_ | Ending date of search. | 2019-08-04 | | `from` | NO | _string_ | Starting date of search. | 2019-08-05 |
         * @summary Get All Return Orders
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalOrdersProcessingReturnGet(contentType: string, options?: any): AxiosPromise<InlineResponse20016> {
            return ReturnExchangeOrdersApiFp(configuration).v1ExternalOrdersProcessingReturnGet(contentType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReturnExchangeOrdersApi - interface
 * @export
 * @interface ReturnExchangeOrdersApi
 */
export interface ReturnExchangeOrdersApiInterface {
    /**
     * Use this API to create a new exchange order in your Shiprocket panel. Exchange orders are created in case the buyer needs to replace an item due to reasons such as size mismatch, wrong product received, or defective product. This API helps sellers seamlessly process exchange requests while ensuring the correct quality checks and logistics handling  #### Parameters:  | PARAMS | REQUIRED | DATA TYPE | DESCRIPTION | EXAMPLE | | --- | --- | --- | --- | --- | | `exchange_order_id` | YES | _String_ | Unique ID for the exchange order | EX_TEST002 | | `seller_pickup_location_id` | YES | _String_ | Pickup location ID of the seller | 5723898 | | `seller_shipping_location_id` | YES | _String_ | Shipping location ID of the seller | 5723898 | | `return_order_id` | YES | _String_ | Unique ID for the return order | R_TEST002 | | `order_date` | YES | _Date_ | Date of order placement (YYYY-MM-DD) | 2024-12-10 | | `payment_method` | YES | _String_ | Payment method used for the order | prepaid | | `buyer_shipping_first_name` | YES | _String_ | First name of the shipping buyer | Test | | `buyer_shipping_last_name` | NO | _String_ | Last name of the shipping buyer | Test | | `buyer_shipping_email` | NO | _String_ | Email of the shipping buyer (valid email format) | [test@gmail.com](https://null) | | `buyer_shipping_address` | YES | _String_ | Full address of the shipping buyer | dkalsd | | `buyer_shipping_address_2` | NO | _String_ | Additional address details |  | | `buyer_shipping_city` | YES | _String_ | City of the shipping buyer | South West Delhi | | `buyer_shipping_state` | YES | _String_ | State of the shipping buyer | Delhi | | `buyer_shipping_country` | YES | _String_ | Country of the shipping buyer | India | | `buyer_shipping_pincode` | YES | _String_ | Pincode of the shipping address | 110045 | | `buyer_shipping_phone` | YES | _String_ | Contact number of the shipping buyer (10 digits) | 9716414139 | | `buyer_pickup_first_name` | YES | _String_ | First name of the pickup buyer | Test | | `buyer_pickup_last_name` | NO | _String_ | Last name of the pickup buyer | Test | | `buyer_pickup_email` | NO | _String_ | Email of the pickup buyer | [test@gmail.com](https://null) | | `buyer_pickup_address` | YES | _String_ | Full address of the pickup buyer | Test | | `buyer_pickup_address_2` | NO | _String_ | Additional pickup address details |  | | `buyer_pickup_city` | YES | _String_ | City of the pickup buyer | South West Delhi | | `buyer_pickup_state` | YES | _String_ | State of the pickup buyer | Delhi | | `buyer_pickup_country` | YES | _String_ | Country of the pickup buyer | India | | `buyer_pickup_pincode` | YES | _String_ | Pincode of the pickup address | 110045 | | `buyer_pickup_phone` | YES | _String_ | Contact number of the pickup buyer (10 digits) | 9716414139 | | `order_items` | YES | _Array_ | List of items in the order |  | | `order_items[].name` | YES | _String_ | Name of the product | Black tshirt XL | | `order_items[].selling_price` | YES | _Float_ | Price of the product | 500.00 | | `order_items[].units` | YES | _Integer_ | Quantity of the product | 1 | | `order_items[].hsn` | YES | _String_ | HSN code of the product | 1733808730720 | | `order_items[].sku` | YES | _String_ | SKU of the product | mackbook | | `order_items[].tax` | NO | _Float_ | Tax amount |  | | `order_items[].discount` | NO | _Float_ | Discount on the product |  | | `order_items[].exchange_item_id` | NO | _String_ | Exchange item ID | 193658024 | | `order_items[].exchange_item_name` | YES | _String_ | Exchange item name | Black tshirt XL | | `order_items[].exchange_item_sku` | YES | _String_ | Exchange item SKU | mackbook | | `sub_total` | YES | _Float_ | Subtotal amount | 500.00 | | `shipping_charges` | NO | _Float_ | Shipping charges |  | | `giftwrap_charges` | NO | _Float_ | Gift wrapping charges |  | | `total_discount` | NO | _Float_ | Total discount on the order | 0 | | `transaction_charges` | NO | _Float_ | Transaction charges |  | | `return_length` | YES | _Float_ | Return package length (cm) | 10.00 | | `return_breadth` | YES | _Float_ | Return package breadth (cm) | 10.00 | | `return_height` | YES | _Float_ | Return package height (cm) | 10.00 | | `return_weight` | YES | _Float_ | Return package weight (kg) | 0.500 | | `exchange_length` | YES | _Float_ | Exchange package length (cm) | 11.00 | | `exchange_breadth` | YES | _Float_ | Exchange package breadth (cm) | 11.00 | | `exchange_height` | YES | _Float_ | Exchange package height (cm) | 11.00 | | `exchange_weight` | YES | _Float_ | Exchange package weight (kg) | 11.00 | | `return_reason` | YES | _String_ | Reason for return | 29 |
     * @summary Create Exchange Order
     * @param {string} contentType 
     * @param {string} authorization 
     * @param {InlineObject3} [inlineObject3] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnExchangeOrdersApiInterface
     */
    v1ExternalOrdersCreateExchangePost(contentType: string, authorization: string, inlineObject3?: InlineObject3, options?: any): AxiosPromise<InlineResponse20014>;

    /**
     * Use this API to create a new return order in your Shiprocket panel. Return orders are created in case the buyer refuses/rejects/returns a specific order.   The parameter specifications are the same as the custom order API, with a few exceptions.  #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `order_id` | YES | _string_ | The order id you want to specify to the order. Max char: 50. (Avoid passing character values as this contradicts some other API calls) | 99711997 | | `order_date` | YES | _string_ | The date of order creation in yyyy-mm-dd format. Time is an additional option. | 2019-08-05 | | `channel_id` | NO | _integer_ | Id of the desired channel where the order is to be placed. \'Custom\' channel id is selected in case parameter is not filled. | 768903 | | `pickup_customer_name` | YES | _string_ | The customer’s first name. | John | | `pickup_last_name` | NO | _string_ | The customer’s last name. | Doe | | `pickup_address` | YES | _string_ | The customer\'s primary address. | 416, Udyog Vihar III, Sector 20 | | `pickup_address_2` | NO | _string_ | Additional customer address details. | DDA | | `pickup_city` | YES | _string_ | The customer\'s city name. | Delhi | | `pickup_state` | YES | _string_ | The customer\'s state. | New Delhi | | `pickup_country` | YES | _string_ | Customer\'s country name. | India | | `pickup_pincode` | YES | _integer_ | Pincode of the customer address. | 110002 | | `pickup_email` | YES | _string_ | Customer\'s email address. | [john@doe.com](https://mailto:john@doe.com) | | `pickup_phone` | YES | _string_ | Customer\'s phone number. | 9999999999 | | `pickup_isd_code` | NO | _string_ | ISD code. | 91 | | `shipping_customer_name` | YES | _string_ | The name of the seller the package is shipped back to. | Jane | | `shipping_last_name` | NO | _string_ | The last name of the seller. | Doe | | `shipping_address` | YES | _string_ | The address the package is shipped to. | Castle | | `shipping_address_2` | NO | _string_ | Further shipping address details. | Bridge | | `shipping_city` | YES | _string_ | The shipping address city. | Mumbai | | `shipping_country` | YES | _string_ | The shipping address country. | India | | `shipping_pincode` | YES | _integer_ | The shipping pincode. | 220022 | | `shipping_state` | YES | _string_ | Shipping address state. | Maharashtra | | `shipping_email` | NO | _string_ | The email of the seller the package is shipped to. | [jane@doe.com](https://mailto:jane@doe.com) | | `shipping_isd_code` | NO | _string_ | The shipping isd code. | 91 | | `shipping_phone` | YES | _integer_ | Phone no. of the shipping customer | 8888888888 | | `order_items` | YES | / | Array containing further fields. | / | | `name` | YES | _string_ | Name of the product. | ball123 | | `sku` | YES | _string_ | The sku id of the product. | Tennis Ball | | `units` | YES | _integer_ | No of units that are to be shipped. | 1 | | `selling_price` | YES | _integer_ | The selling price per unit in Rupee. Inclusive of GST. | 10 | | `discount` | NO | _integer_ | The discount amount in Rupee. Inclusive of tax. | 0 | | `hsn` | NO | _string_ | Harmonised System Nomenclature code. Used to determine the category of taxation the goods fall under. | 4412 | | `return_reason` | NO | _string_ | Bought by Mistake, Both product and shipping box damaged | Please refer to the \"Possible return_reason values\" section | | `qc_enable` | CONDITIONAL YES | _string_ | If True, QC will be performed for that product and QC will be performed only for a single SKU per order | true/false | | `qc_color` | NO | _varchar(180)_ | The color of the product can be passed in this parameter | Red | | `qc_brand` | NO | _varchar(255)_ | The brand of the product can be passed in this parameter | 768903 | | `qc_serial_no` | NO | _varchar(255)_ | The serial number of the product can be passed in this parameter | T13123124 | | `qc_ean_barcode` | NO | _varchar(255)_ | EAN/Barcode of the product can be passed in this parameter | QWRE123 | | `qc_size` | NO | _varchar(180)_ | The size of the product can be passed in this parameter | 8 | | `qc_product_name` | CONDITIONAL YES | _varchar(255)_ | If qc_enable set True, then Product name should be passed in this parameter | Shoes | | `qc_product_image` | CONDITIONAL YES | _varchar(255)_ | If qc_enable set True, then Product image should be passed in this parameter (only png/jpg format supported) | [https://s3-ap-southeast-1.amazonaws.com/kr-multichannel/1636713733zxja.png](https://s3-ap-southeast-1.amazonaws.com/kr-multichannel/1636713733zxja.png) | | `qc_product_imei` | NO | _varchar(255)_ | IMEI of the device | 398612387501872509 | | `qc_brand_tag` | NO | _boolean_ | Eligible Categories : Selective like Footwear, Apparels  <br>The pickup agent will cross-check the provided brand name, which should match the brand tag affixed to the item(s) upon delivery. Can be either 0 or 1 | 1 | | `qc_used_check` | NO | _boolean_ | Eligible Product Categories : All  <br>The pickup agent will check the product being handed over for clear signs of usage. Can be either 0 or 1 | 0 | | `qc_sealtag_check` | NO | _boolean_ | Eligible Product Categories : All  <br>The pickup agent will check if the seal tag is intact in the products received from the buyer. Can be either 0 or 1 | 1 | | `qc_check_damaged_product` | NO | _string_ | Eligible Product Categories : All  <br>The pickup agent will check the product for any signs of damages. Can be either yes or no | yes | | `payment_method` | YES | _string_ | The method of payment. This should always be prepaid. | Prepaid | | `total_discount` | NO | _string_ | The total discount amount in Rupee. | 0 | | `sub_total` | YES | _integer_ | Calculated sub total amount in Rupee after deductions. | 10 | | `length` | YES | _float_ | The length of the shipment in cms. | 10 | | `breadth` | YES | _float_ | The breadth of the shipment in cms. | 15 | | `height` | YES | _float_ | The height of the shipment in cms. | 20 | | `weight` | YES | _float_ | The shipment weight in kgs. | 1 |  #### <u><b>Possible return_reason values</b></u><u>:</u>  ``` 1. Bought by Mistake 2. Better price available 3. Performance or quality not adequate 4. Incompatible or not useful 5. Product damaged, but shipping box OK 6. Item arrived too late 7. Missing parts or accessories 8. Both product and shipping box damaged 9. Wrong item was sent 10. Item defective or doesn\'t work 11. No longer needed 12. Didn\'t approve purchase 13. Inaccurate website description 14. Return against replacement 15. Delay Refund 16. Delivered Late 17. Product does not Match Description on Website 18. Both Product & Outer Box Damaged 19. Defective or does not work 20. Product damaged, but outer Box OK 21. Missing Parts or Accessories 22. Incorrect Item Delivered 23. Product Defective or Doesn\'t Work 24. Product performance/quality is not up to my expectations 25. Other 26. Changed my mind 27. Does not fit 28. Size not as expected 29. Item is damaged 30. Received wrong item 31. Parcel damaged on arrival 32. Quality not as expected 33. Missing Item or accessories 34. Performance not adequate 35. Not as described 36. Arrived too late 37. Order Not Received 38. Empty Package 39. Wrong item or Wrong colour was sent 40. Item defective, expired, spoilt or does not work 41. Items or parts missing 42. Size or Quantity issues 43. Status as delivered but order not received 44. N/A   ```
     * @summary Create a Return Order
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnExchangeOrdersApiInterface
     */
    v1ExternalOrdersCreateReturnPost(body?: string, options?: any): AxiosPromise<InlineResponse20013>;

    /**
     * Use this API to update your return orders. Please specify the parameters based on the \"action\" key.  #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `order_id` | YES | _string_ | Your return order ID | R_1231234 | | `action` | YES | _string_ | Pass array of action. Allowed actions:  <br>`1. product_details: Allows you to edit the weight and dimensions`  <br>`2. warehouse_address: Allows you to change the return address` | \"action\": \\[\"product_details\"\\] | | `length` | CONDITIONAL YES | _float_ | The length of the item in cms. Must be more than 0.5 | 12 | | `breadth` | CONDITIONAL YES | _float_ | The breadth of the item in cms. Must be more than 0.5 | 23 | | `height` | CONDITIONAL YES | _float_ | The height of the item in cms. Must be more than 0.5 | 30 | | `weight` | CONDITIONAL YES | _float_ | The weight of the item in kgs. Must be more than 0. | 10 | | `return_warehouse_id` | CONDITIONAL YES | _integer_ | Id of pickup location | 213443 |
     * @summary Update Return Order
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnExchangeOrdersApiInterface
     */
    v1ExternalOrdersEditPost(body?: string, options?: any): AxiosPromise<InlineResponse20015>;

    /**
     * Using this API, you can get a list of all created return orders in your Shiprocket account, along with their details.  No parameters are required to use the API. However, further parameters can be defined to sort and filter the data.  #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `page` | NO | _integer_ | The page number to display. | 1 | | `per_page` | NO | _integer_ | The number of orders per page. | 2 | | `to` | NO | _string_ | Ending date of search. | 2019-08-04 | | `from` | NO | _string_ | Starting date of search. | 2019-08-05 |
     * @summary Get All Return Orders
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnExchangeOrdersApiInterface
     */
    v1ExternalOrdersProcessingReturnGet(contentType: string, options?: any): AxiosPromise<InlineResponse20016>;

}

/**
 * ReturnExchangeOrdersApi - object-oriented interface
 * @export
 * @class ReturnExchangeOrdersApi
 * @extends {BaseAPI}
 */
export class ReturnExchangeOrdersApi extends BaseAPI implements ReturnExchangeOrdersApiInterface {
    /**
     * Use this API to create a new exchange order in your Shiprocket panel. Exchange orders are created in case the buyer needs to replace an item due to reasons such as size mismatch, wrong product received, or defective product. This API helps sellers seamlessly process exchange requests while ensuring the correct quality checks and logistics handling  #### Parameters:  | PARAMS | REQUIRED | DATA TYPE | DESCRIPTION | EXAMPLE | | --- | --- | --- | --- | --- | | `exchange_order_id` | YES | _String_ | Unique ID for the exchange order | EX_TEST002 | | `seller_pickup_location_id` | YES | _String_ | Pickup location ID of the seller | 5723898 | | `seller_shipping_location_id` | YES | _String_ | Shipping location ID of the seller | 5723898 | | `return_order_id` | YES | _String_ | Unique ID for the return order | R_TEST002 | | `order_date` | YES | _Date_ | Date of order placement (YYYY-MM-DD) | 2024-12-10 | | `payment_method` | YES | _String_ | Payment method used for the order | prepaid | | `buyer_shipping_first_name` | YES | _String_ | First name of the shipping buyer | Test | | `buyer_shipping_last_name` | NO | _String_ | Last name of the shipping buyer | Test | | `buyer_shipping_email` | NO | _String_ | Email of the shipping buyer (valid email format) | [test@gmail.com](https://null) | | `buyer_shipping_address` | YES | _String_ | Full address of the shipping buyer | dkalsd | | `buyer_shipping_address_2` | NO | _String_ | Additional address details |  | | `buyer_shipping_city` | YES | _String_ | City of the shipping buyer | South West Delhi | | `buyer_shipping_state` | YES | _String_ | State of the shipping buyer | Delhi | | `buyer_shipping_country` | YES | _String_ | Country of the shipping buyer | India | | `buyer_shipping_pincode` | YES | _String_ | Pincode of the shipping address | 110045 | | `buyer_shipping_phone` | YES | _String_ | Contact number of the shipping buyer (10 digits) | 9716414139 | | `buyer_pickup_first_name` | YES | _String_ | First name of the pickup buyer | Test | | `buyer_pickup_last_name` | NO | _String_ | Last name of the pickup buyer | Test | | `buyer_pickup_email` | NO | _String_ | Email of the pickup buyer | [test@gmail.com](https://null) | | `buyer_pickup_address` | YES | _String_ | Full address of the pickup buyer | Test | | `buyer_pickup_address_2` | NO | _String_ | Additional pickup address details |  | | `buyer_pickup_city` | YES | _String_ | City of the pickup buyer | South West Delhi | | `buyer_pickup_state` | YES | _String_ | State of the pickup buyer | Delhi | | `buyer_pickup_country` | YES | _String_ | Country of the pickup buyer | India | | `buyer_pickup_pincode` | YES | _String_ | Pincode of the pickup address | 110045 | | `buyer_pickup_phone` | YES | _String_ | Contact number of the pickup buyer (10 digits) | 9716414139 | | `order_items` | YES | _Array_ | List of items in the order |  | | `order_items[].name` | YES | _String_ | Name of the product | Black tshirt XL | | `order_items[].selling_price` | YES | _Float_ | Price of the product | 500.00 | | `order_items[].units` | YES | _Integer_ | Quantity of the product | 1 | | `order_items[].hsn` | YES | _String_ | HSN code of the product | 1733808730720 | | `order_items[].sku` | YES | _String_ | SKU of the product | mackbook | | `order_items[].tax` | NO | _Float_ | Tax amount |  | | `order_items[].discount` | NO | _Float_ | Discount on the product |  | | `order_items[].exchange_item_id` | NO | _String_ | Exchange item ID | 193658024 | | `order_items[].exchange_item_name` | YES | _String_ | Exchange item name | Black tshirt XL | | `order_items[].exchange_item_sku` | YES | _String_ | Exchange item SKU | mackbook | | `sub_total` | YES | _Float_ | Subtotal amount | 500.00 | | `shipping_charges` | NO | _Float_ | Shipping charges |  | | `giftwrap_charges` | NO | _Float_ | Gift wrapping charges |  | | `total_discount` | NO | _Float_ | Total discount on the order | 0 | | `transaction_charges` | NO | _Float_ | Transaction charges |  | | `return_length` | YES | _Float_ | Return package length (cm) | 10.00 | | `return_breadth` | YES | _Float_ | Return package breadth (cm) | 10.00 | | `return_height` | YES | _Float_ | Return package height (cm) | 10.00 | | `return_weight` | YES | _Float_ | Return package weight (kg) | 0.500 | | `exchange_length` | YES | _Float_ | Exchange package length (cm) | 11.00 | | `exchange_breadth` | YES | _Float_ | Exchange package breadth (cm) | 11.00 | | `exchange_height` | YES | _Float_ | Exchange package height (cm) | 11.00 | | `exchange_weight` | YES | _Float_ | Exchange package weight (kg) | 11.00 | | `return_reason` | YES | _String_ | Reason for return | 29 |
     * @summary Create Exchange Order
     * @param {string} contentType 
     * @param {string} authorization 
     * @param {InlineObject3} [inlineObject3] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnExchangeOrdersApi
     */
    public v1ExternalOrdersCreateExchangePost(contentType: string, authorization: string, inlineObject3?: InlineObject3, options?: any) {
        return ReturnExchangeOrdersApiFp(this.configuration).v1ExternalOrdersCreateExchangePost(contentType, authorization, inlineObject3, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to create a new return order in your Shiprocket panel. Return orders are created in case the buyer refuses/rejects/returns a specific order.   The parameter specifications are the same as the custom order API, with a few exceptions.  #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `order_id` | YES | _string_ | The order id you want to specify to the order. Max char: 50. (Avoid passing character values as this contradicts some other API calls) | 99711997 | | `order_date` | YES | _string_ | The date of order creation in yyyy-mm-dd format. Time is an additional option. | 2019-08-05 | | `channel_id` | NO | _integer_ | Id of the desired channel where the order is to be placed. \'Custom\' channel id is selected in case parameter is not filled. | 768903 | | `pickup_customer_name` | YES | _string_ | The customer’s first name. | John | | `pickup_last_name` | NO | _string_ | The customer’s last name. | Doe | | `pickup_address` | YES | _string_ | The customer\'s primary address. | 416, Udyog Vihar III, Sector 20 | | `pickup_address_2` | NO | _string_ | Additional customer address details. | DDA | | `pickup_city` | YES | _string_ | The customer\'s city name. | Delhi | | `pickup_state` | YES | _string_ | The customer\'s state. | New Delhi | | `pickup_country` | YES | _string_ | Customer\'s country name. | India | | `pickup_pincode` | YES | _integer_ | Pincode of the customer address. | 110002 | | `pickup_email` | YES | _string_ | Customer\'s email address. | [john@doe.com](https://mailto:john@doe.com) | | `pickup_phone` | YES | _string_ | Customer\'s phone number. | 9999999999 | | `pickup_isd_code` | NO | _string_ | ISD code. | 91 | | `shipping_customer_name` | YES | _string_ | The name of the seller the package is shipped back to. | Jane | | `shipping_last_name` | NO | _string_ | The last name of the seller. | Doe | | `shipping_address` | YES | _string_ | The address the package is shipped to. | Castle | | `shipping_address_2` | NO | _string_ | Further shipping address details. | Bridge | | `shipping_city` | YES | _string_ | The shipping address city. | Mumbai | | `shipping_country` | YES | _string_ | The shipping address country. | India | | `shipping_pincode` | YES | _integer_ | The shipping pincode. | 220022 | | `shipping_state` | YES | _string_ | Shipping address state. | Maharashtra | | `shipping_email` | NO | _string_ | The email of the seller the package is shipped to. | [jane@doe.com](https://mailto:jane@doe.com) | | `shipping_isd_code` | NO | _string_ | The shipping isd code. | 91 | | `shipping_phone` | YES | _integer_ | Phone no. of the shipping customer | 8888888888 | | `order_items` | YES | / | Array containing further fields. | / | | `name` | YES | _string_ | Name of the product. | ball123 | | `sku` | YES | _string_ | The sku id of the product. | Tennis Ball | | `units` | YES | _integer_ | No of units that are to be shipped. | 1 | | `selling_price` | YES | _integer_ | The selling price per unit in Rupee. Inclusive of GST. | 10 | | `discount` | NO | _integer_ | The discount amount in Rupee. Inclusive of tax. | 0 | | `hsn` | NO | _string_ | Harmonised System Nomenclature code. Used to determine the category of taxation the goods fall under. | 4412 | | `return_reason` | NO | _string_ | Bought by Mistake, Both product and shipping box damaged | Please refer to the \"Possible return_reason values\" section | | `qc_enable` | CONDITIONAL YES | _string_ | If True, QC will be performed for that product and QC will be performed only for a single SKU per order | true/false | | `qc_color` | NO | _varchar(180)_ | The color of the product can be passed in this parameter | Red | | `qc_brand` | NO | _varchar(255)_ | The brand of the product can be passed in this parameter | 768903 | | `qc_serial_no` | NO | _varchar(255)_ | The serial number of the product can be passed in this parameter | T13123124 | | `qc_ean_barcode` | NO | _varchar(255)_ | EAN/Barcode of the product can be passed in this parameter | QWRE123 | | `qc_size` | NO | _varchar(180)_ | The size of the product can be passed in this parameter | 8 | | `qc_product_name` | CONDITIONAL YES | _varchar(255)_ | If qc_enable set True, then Product name should be passed in this parameter | Shoes | | `qc_product_image` | CONDITIONAL YES | _varchar(255)_ | If qc_enable set True, then Product image should be passed in this parameter (only png/jpg format supported) | [https://s3-ap-southeast-1.amazonaws.com/kr-multichannel/1636713733zxja.png](https://s3-ap-southeast-1.amazonaws.com/kr-multichannel/1636713733zxja.png) | | `qc_product_imei` | NO | _varchar(255)_ | IMEI of the device | 398612387501872509 | | `qc_brand_tag` | NO | _boolean_ | Eligible Categories : Selective like Footwear, Apparels  <br>The pickup agent will cross-check the provided brand name, which should match the brand tag affixed to the item(s) upon delivery. Can be either 0 or 1 | 1 | | `qc_used_check` | NO | _boolean_ | Eligible Product Categories : All  <br>The pickup agent will check the product being handed over for clear signs of usage. Can be either 0 or 1 | 0 | | `qc_sealtag_check` | NO | _boolean_ | Eligible Product Categories : All  <br>The pickup agent will check if the seal tag is intact in the products received from the buyer. Can be either 0 or 1 | 1 | | `qc_check_damaged_product` | NO | _string_ | Eligible Product Categories : All  <br>The pickup agent will check the product for any signs of damages. Can be either yes or no | yes | | `payment_method` | YES | _string_ | The method of payment. This should always be prepaid. | Prepaid | | `total_discount` | NO | _string_ | The total discount amount in Rupee. | 0 | | `sub_total` | YES | _integer_ | Calculated sub total amount in Rupee after deductions. | 10 | | `length` | YES | _float_ | The length of the shipment in cms. | 10 | | `breadth` | YES | _float_ | The breadth of the shipment in cms. | 15 | | `height` | YES | _float_ | The height of the shipment in cms. | 20 | | `weight` | YES | _float_ | The shipment weight in kgs. | 1 |  #### <u><b>Possible return_reason values</b></u><u>:</u>  ``` 1. Bought by Mistake 2. Better price available 3. Performance or quality not adequate 4. Incompatible or not useful 5. Product damaged, but shipping box OK 6. Item arrived too late 7. Missing parts or accessories 8. Both product and shipping box damaged 9. Wrong item was sent 10. Item defective or doesn\'t work 11. No longer needed 12. Didn\'t approve purchase 13. Inaccurate website description 14. Return against replacement 15. Delay Refund 16. Delivered Late 17. Product does not Match Description on Website 18. Both Product & Outer Box Damaged 19. Defective or does not work 20. Product damaged, but outer Box OK 21. Missing Parts or Accessories 22. Incorrect Item Delivered 23. Product Defective or Doesn\'t Work 24. Product performance/quality is not up to my expectations 25. Other 26. Changed my mind 27. Does not fit 28. Size not as expected 29. Item is damaged 30. Received wrong item 31. Parcel damaged on arrival 32. Quality not as expected 33. Missing Item or accessories 34. Performance not adequate 35. Not as described 36. Arrived too late 37. Order Not Received 38. Empty Package 39. Wrong item or Wrong colour was sent 40. Item defective, expired, spoilt or does not work 41. Items or parts missing 42. Size or Quantity issues 43. Status as delivered but order not received 44. N/A   ```
     * @summary Create a Return Order
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnExchangeOrdersApi
     */
    public v1ExternalOrdersCreateReturnPost(body?: string, options?: any) {
        return ReturnExchangeOrdersApiFp(this.configuration).v1ExternalOrdersCreateReturnPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to update your return orders. Please specify the parameters based on the \"action\" key.  #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `order_id` | YES | _string_ | Your return order ID | R_1231234 | | `action` | YES | _string_ | Pass array of action. Allowed actions:  <br>`1. product_details: Allows you to edit the weight and dimensions`  <br>`2. warehouse_address: Allows you to change the return address` | \"action\": \\[\"product_details\"\\] | | `length` | CONDITIONAL YES | _float_ | The length of the item in cms. Must be more than 0.5 | 12 | | `breadth` | CONDITIONAL YES | _float_ | The breadth of the item in cms. Must be more than 0.5 | 23 | | `height` | CONDITIONAL YES | _float_ | The height of the item in cms. Must be more than 0.5 | 30 | | `weight` | CONDITIONAL YES | _float_ | The weight of the item in kgs. Must be more than 0. | 10 | | `return_warehouse_id` | CONDITIONAL YES | _integer_ | Id of pickup location | 213443 |
     * @summary Update Return Order
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnExchangeOrdersApi
     */
    public v1ExternalOrdersEditPost(body?: string, options?: any) {
        return ReturnExchangeOrdersApiFp(this.configuration).v1ExternalOrdersEditPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Using this API, you can get a list of all created return orders in your Shiprocket account, along with their details.  No parameters are required to use the API. However, further parameters can be defined to sort and filter the data.  #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `page` | NO | _integer_ | The page number to display. | 1 | | `per_page` | NO | _integer_ | The number of orders per page. | 2 | | `to` | NO | _string_ | Ending date of search. | 2019-08-04 | | `from` | NO | _string_ | Starting date of search. | 2019-08-05 |
     * @summary Get All Return Orders
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnExchangeOrdersApi
     */
    public v1ExternalOrdersProcessingReturnGet(contentType: string, options?: any) {
        return ReturnExchangeOrdersApiFp(this.configuration).v1ExternalOrdersProcessingReturnGet(contentType, options).then((request) => request(this.axios, this.basePath));
    }

}
