// tslint:disable
/**
 * shiprocket
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InlineObject9 } from '../models';
// @ts-ignore
import { InlineResponse20038 } from '../models';
// @ts-ignore
import { InlineResponse20039 } from '../models';
// @ts-ignore
import { InlineResponse20040 } from '../models';
// @ts-ignore
import { InlineResponse2007 } from '../models';
// @ts-ignore
import { InlineResponse403 } from '../models';
// @ts-ignore
import { InlineResponse42210 } from '../models';
// @ts-ignore
import { InlineResponse4224 } from '../models';
/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API can be used to display a detailed list of all the products that you have in your Shiprocket account.  There are no required parameters to access this API. However, the displayed result can be filtered or sorted using additional parameters.  #### Parameters:  | **PARAMS**  | **REQUIRED**  |  **DATA TYPE**  |                                                       **DESCRIPTION**                                                       | **EXAMPLE**  | |:----------: |:------------: |:--------------: |:--------------------------------------------------------------------------------------------------------------------------: |:-----------: | |    `page`     |      NO       |    *integer*    |                                            The page number you want to display.                                             |      5       | |  `per_page`   |      NO       |    *integer*    |                                           The number of products to get per page.                                           |      2       | |    `sort`     |      NO       |    *string*     |                                        The order to sort by. Value: *ASC* or *DESC*                                         |     ASC      | |  ` sort_by`   |      NO       |    *string*     |  Allows you to choose the value field by which the items will be sorted.  Could be sorted by id, by sku, time created etc.  |     sku      | |   `filter`    |      NO       |    *string*     |                                        The data to be matched for the filter value.                                         |   11223344   | |  `filter_by`  |      NO       |    *string*     |                                        The filter value field . Can be id, sku, etc.                                        |      id      |
         * @summary Get All Products
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalProductsGet: async (contentType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling v1ExternalProductsGet.');
            }
            const localVarPath = `/v1/external/products`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to import your products in bulk from a .csv file.   No parameters are required. Choose the target file as required. You will receive an import id upon successful import operation.
         * @summary Bulk Import Products
         * @param {string} contentType 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalProductsImportPost: async (contentType: string, file: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling v1ExternalProductsImportPost.');
            }
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling v1ExternalProductsImportPost.');
            }
            const localVarPath = `/v1/external/products/import`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to add a new product to your Shiprocket account.   Provide the required product details and any additional info to successfully add a new product to your product list.  **Notes:**  - \'sku\' Id has to be unique. It cannot be the same as an existing sku.      - In case no category code is added, the code should be default.      - \'type\' field should be either \'single\' or \'multiple.\'       #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `sku` | YES | _string_ | Stock Keeping Unit or the identification unit of an individual product (generally alphanumeric). | bat123 | | `HSN` | NO | _string_ | Harmonised System Nomenclature. A code number is used to classify goods for taxation purposes. Done to determine which category of taxes do the goods come under. | 4412 | | `name` | YES | _string_ | Name of the product. | Batman Toy | | `tax_code` | NO | _string_ | The percentage of tax that is to be imposed. | 10 | | `type` | YES | _string_ | If there is only one product or multiple types of products. **Single** or **Multiple** | Single. | | `qty` | YES | _integer_ | Total Quantity of the products to be shipped. | 5 | | `low_stock` | NO | _string_ | Specifies when the low stock notification should come on | / | | `category_code` | YES | _string_ | You can add a category code to your ShipRocket account from “add category” | default | | `description` | NO | _string_ | Gives a description of the product. | Batman plastic toy. | | `brand` | NO | _string_ | The product brand name. | Bat | | `size` | NO | _integer_ | The size of the product. | 25 | | `weight` | NO | _integer_ | The weight of the product in kgs. | 0.5 | | `length` | NO | _integer_ | The length of the product in cms. | 10 | | `width` | NO | _integer_ | The width of the product in cms. | 5 | | `height` | NO | _integer_ | The height of the product in cms. | 15 | | `ean` | NO | _string_ | European Article Number - A barcode for product identification (which helps manufacturers identify how many products have been sold once a sale is made). It is 13 digits long and required for international selling. | / | | `upc` | NO | _string_ | Universal Product Code – Barcode for product identification which is used across the world. It is 12 digits long. | / | | `isbn` | NO | _string_ | International Standard Book Number – Identification barcode for books, magazines, e-books and other published media. It is 10 digits long. | / | | `color` | NO | _string_ | The colour of the product. | Black | | `imei_serialnumber` | NO | _string_ | The International Mobile Equipment Identity Number, which is used by a network to identify valid devices. E.g. if two iPhones have to be shipped, they will have 2 IMEI numbers | / | | `cost_price` | NO | _integer_ | The manufacture cost price of the product. | 500 | | `mrp` | NO | _string_ | Maximum Retail Price. How much is the maximum price which the product can be sold at. | 1000 | | `status` | NO | _boolean_ | In Boolean, if the product details have been successfully or unsuccessfully added. | 1 | | `image_url` | NO | _string_ | Shows the URL of the product images which have been uploaded. | / | | `qc_details` | NO | / | List of items and their relevant fields in the form of Array. | / | | `product_image` | CONDITIONAL YES | _string_ | Pickup agent will cross check theshared product with the actual product received from the buyer. Mandatory for all QC Products | [https://abc/xyz.jpg](https://abc/xyz.jpg) | | `brand` | CONDITIONAL YES | _string_ | The pickup agent will cross check the provided brand name visible on the item(s) or its packaging. | shiprocket | | `brand_tag` | CONDITIONAL YES | _string_ | The pickup agent will cross-check the provided brand name, which should match the brand tag affixed to the item(s) upon delivery. | shiprocket | | `color` | CONDITIONAL YES | _string_ | Pickup agent will cross check shared product color with the actual product received from the buyer. | green | | `size` | CONDITIONAL YES | _string_ | Pickup agent will cross check shared product size with the size on the label/tag. | L | | `product_imei` | CONDITIONAL YES | _string_ | It is a 15 digit unique number. It is displayed on the screen, on the box, or at the back of the appliance. This can be used to check production & garauntee of the appliance. | 0123456781234 | | `serial_no` | CONDITIONAL YES | _string_ | A serial number (SN) is a unique alphanumeric value assigned to each individual product. | 123456 |
         * @summary Add New Products
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalProductsPost: async (body?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/external/products`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'text/plain';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to convert an existing product to a QC product. The {productID} will be the \"id\" from the \"[Get all products](https://apidocs.shiprocket.in/#0b8d1f26-3abd-4f4e-9cd8-3928bcfcf30b)\" or \"[Get specific product details](https://apidocs.shiprocket.in/#134f7710-660c-464f-b579-6da46ba9402f)\" API.  #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `sku` | YES | _string_ | Stock Keeping Unit or the identification unit of an individual product (generally alphanumeric). | bat123 | | `product_image` | YES | _string_ | Pickup agent will cross check shared product color with the actual product received from the buyer. Mandatory for all QC Products | [https://abc/xyz.jpg](https://abc/xyz.jpg) | | `serial_no` | NO | _string_ | A serial number (SN) is a unique alphanumeric value assigned to each individual product. | 12345 | | `size` | NO | _string_ | Pickup agent will cross check shared product size with the size on the label/tag. | L | | `color` | NO | _string_ | Pickup agent will cross check shared product color with the actual product received from the buyer. | Green | | `brand` | NO | _integer_ | The pickup agent will cross-check the provided brand name visible on the item(s) or its packaging. | shiprocket | | `brand_box` | NO | _string_ | The pickup agent will cross-check the provided brand name, which should match the brand tag affixed to the item(s) upon delivery | shiprocket | | `product_imei` | NO | _string_ | \"It is a 15-digit unique number. It is displayed on the screen, on the box, or at the back of the appliance. This can be used to check production & guarantee of the appliance. | 1234567890 |
         * @summary Convert to QC Product
         * @param {string} contentType 
         * @param {string} [authorization] 
         * @param {InlineObject9} [inlineObject9] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalProductsQcProductUpdateProductIDPost: async (contentType: string, authorization?: string, inlineObject9?: InlineObject9, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling v1ExternalProductsQcProductUpdateProductIDPost.');
            }
            const localVarPath = `/v1/external/products/qc-product-update/{productID}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject9 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject9 !== undefined ? inlineObject9 : {}) : (inlineObject9 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API will provide a sample format for a CSV file that can be used for importing orders. You can use this format to create your CSV file, which you want to use to import products into your Shiprocket account.  No additional parameters are required.
         * @summary Get Sample .csv Format
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalProductsSampleGet: async (contentType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling v1ExternalProductsSampleGet.');
            }
            const localVarPath = `/v1/external/products/sample`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to get the details of a specific product. The product details will be displayed in JSON format.  You need to pass the product id in the endpoint URL for the successful call of the API. No other body parameters are required.  #### Path:   |                 **EXAMPLE**                 | |:------------------------------------------: | | https://apiv2.shiprocket.in/v1/external/products/show/17484610            |
         * @summary Get Specific Product Details
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalProductsShowProductIdGet: async (contentType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling v1ExternalProductsShowProductIdGet.');
            }
            const localVarPath = `/v1/external/products/show/{product_id}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This API can be used to display a detailed list of all the products that you have in your Shiprocket account.  There are no required parameters to access this API. However, the displayed result can be filtered or sorted using additional parameters.  #### Parameters:  | **PARAMS**  | **REQUIRED**  |  **DATA TYPE**  |                                                       **DESCRIPTION**                                                       | **EXAMPLE**  | |:----------: |:------------: |:--------------: |:--------------------------------------------------------------------------------------------------------------------------: |:-----------: | |    `page`     |      NO       |    *integer*    |                                            The page number you want to display.                                             |      5       | |  `per_page`   |      NO       |    *integer*    |                                           The number of products to get per page.                                           |      2       | |    `sort`     |      NO       |    *string*     |                                        The order to sort by. Value: *ASC* or *DESC*                                         |     ASC      | |  ` sort_by`   |      NO       |    *string*     |  Allows you to choose the value field by which the items will be sorted.  Could be sorted by id, by sku, time created etc.  |     sku      | |   `filter`    |      NO       |    *string*     |                                        The data to be matched for the filter value.                                         |   11223344   | |  `filter_by`  |      NO       |    *string*     |                                        The filter value field . Can be id, sku, etc.                                        |      id      |
         * @summary Get All Products
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExternalProductsGet(contentType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20038>> {
            const localVarAxiosArgs = await ProductsApiAxiosParamCreator(configuration).v1ExternalProductsGet(contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Use this API to import your products in bulk from a .csv file.   No parameters are required. Choose the target file as required. You will receive an import id upon successful import operation.
         * @summary Bulk Import Products
         * @param {string} contentType 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExternalProductsImportPost(contentType: string, file: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2007>> {
            const localVarAxiosArgs = await ProductsApiAxiosParamCreator(configuration).v1ExternalProductsImportPost(contentType, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Use this API to add a new product to your Shiprocket account.   Provide the required product details and any additional info to successfully add a new product to your product list.  **Notes:**  - \'sku\' Id has to be unique. It cannot be the same as an existing sku.      - In case no category code is added, the code should be default.      - \'type\' field should be either \'single\' or \'multiple.\'       #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `sku` | YES | _string_ | Stock Keeping Unit or the identification unit of an individual product (generally alphanumeric). | bat123 | | `HSN` | NO | _string_ | Harmonised System Nomenclature. A code number is used to classify goods for taxation purposes. Done to determine which category of taxes do the goods come under. | 4412 | | `name` | YES | _string_ | Name of the product. | Batman Toy | | `tax_code` | NO | _string_ | The percentage of tax that is to be imposed. | 10 | | `type` | YES | _string_ | If there is only one product or multiple types of products. **Single** or **Multiple** | Single. | | `qty` | YES | _integer_ | Total Quantity of the products to be shipped. | 5 | | `low_stock` | NO | _string_ | Specifies when the low stock notification should come on | / | | `category_code` | YES | _string_ | You can add a category code to your ShipRocket account from “add category” | default | | `description` | NO | _string_ | Gives a description of the product. | Batman plastic toy. | | `brand` | NO | _string_ | The product brand name. | Bat | | `size` | NO | _integer_ | The size of the product. | 25 | | `weight` | NO | _integer_ | The weight of the product in kgs. | 0.5 | | `length` | NO | _integer_ | The length of the product in cms. | 10 | | `width` | NO | _integer_ | The width of the product in cms. | 5 | | `height` | NO | _integer_ | The height of the product in cms. | 15 | | `ean` | NO | _string_ | European Article Number - A barcode for product identification (which helps manufacturers identify how many products have been sold once a sale is made). It is 13 digits long and required for international selling. | / | | `upc` | NO | _string_ | Universal Product Code – Barcode for product identification which is used across the world. It is 12 digits long. | / | | `isbn` | NO | _string_ | International Standard Book Number – Identification barcode for books, magazines, e-books and other published media. It is 10 digits long. | / | | `color` | NO | _string_ | The colour of the product. | Black | | `imei_serialnumber` | NO | _string_ | The International Mobile Equipment Identity Number, which is used by a network to identify valid devices. E.g. if two iPhones have to be shipped, they will have 2 IMEI numbers | / | | `cost_price` | NO | _integer_ | The manufacture cost price of the product. | 500 | | `mrp` | NO | _string_ | Maximum Retail Price. How much is the maximum price which the product can be sold at. | 1000 | | `status` | NO | _boolean_ | In Boolean, if the product details have been successfully or unsuccessfully added. | 1 | | `image_url` | NO | _string_ | Shows the URL of the product images which have been uploaded. | / | | `qc_details` | NO | / | List of items and their relevant fields in the form of Array. | / | | `product_image` | CONDITIONAL YES | _string_ | Pickup agent will cross check theshared product with the actual product received from the buyer. Mandatory for all QC Products | [https://abc/xyz.jpg](https://abc/xyz.jpg) | | `brand` | CONDITIONAL YES | _string_ | The pickup agent will cross check the provided brand name visible on the item(s) or its packaging. | shiprocket | | `brand_tag` | CONDITIONAL YES | _string_ | The pickup agent will cross-check the provided brand name, which should match the brand tag affixed to the item(s) upon delivery. | shiprocket | | `color` | CONDITIONAL YES | _string_ | Pickup agent will cross check shared product color with the actual product received from the buyer. | green | | `size` | CONDITIONAL YES | _string_ | Pickup agent will cross check shared product size with the size on the label/tag. | L | | `product_imei` | CONDITIONAL YES | _string_ | It is a 15 digit unique number. It is displayed on the screen, on the box, or at the back of the appliance. This can be used to check production & garauntee of the appliance. | 0123456781234 | | `serial_no` | CONDITIONAL YES | _string_ | A serial number (SN) is a unique alphanumeric value assigned to each individual product. | 123456 |
         * @summary Add New Products
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExternalProductsPost(body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await ProductsApiAxiosParamCreator(configuration).v1ExternalProductsPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Use this API to convert an existing product to a QC product. The {productID} will be the \"id\" from the \"[Get all products](https://apidocs.shiprocket.in/#0b8d1f26-3abd-4f4e-9cd8-3928bcfcf30b)\" or \"[Get specific product details](https://apidocs.shiprocket.in/#134f7710-660c-464f-b579-6da46ba9402f)\" API.  #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `sku` | YES | _string_ | Stock Keeping Unit or the identification unit of an individual product (generally alphanumeric). | bat123 | | `product_image` | YES | _string_ | Pickup agent will cross check shared product color with the actual product received from the buyer. Mandatory for all QC Products | [https://abc/xyz.jpg](https://abc/xyz.jpg) | | `serial_no` | NO | _string_ | A serial number (SN) is a unique alphanumeric value assigned to each individual product. | 12345 | | `size` | NO | _string_ | Pickup agent will cross check shared product size with the size on the label/tag. | L | | `color` | NO | _string_ | Pickup agent will cross check shared product color with the actual product received from the buyer. | Green | | `brand` | NO | _integer_ | The pickup agent will cross-check the provided brand name visible on the item(s) or its packaging. | shiprocket | | `brand_box` | NO | _string_ | The pickup agent will cross-check the provided brand name, which should match the brand tag affixed to the item(s) upon delivery | shiprocket | | `product_imei` | NO | _string_ | \"It is a 15-digit unique number. It is displayed on the screen, on the box, or at the back of the appliance. This can be used to check production & guarantee of the appliance. | 1234567890 |
         * @summary Convert to QC Product
         * @param {string} contentType 
         * @param {string} [authorization] 
         * @param {InlineObject9} [inlineObject9] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExternalProductsQcProductUpdateProductIDPost(contentType: string, authorization?: string, inlineObject9?: InlineObject9, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20040>> {
            const localVarAxiosArgs = await ProductsApiAxiosParamCreator(configuration).v1ExternalProductsQcProductUpdateProductIDPost(contentType, authorization, inlineObject9, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This API will provide a sample format for a CSV file that can be used for importing orders. You can use this format to create your CSV file, which you want to use to import products into your Shiprocket account.  No additional parameters are required.
         * @summary Get Sample .csv Format
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExternalProductsSampleGet(contentType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await ProductsApiAxiosParamCreator(configuration).v1ExternalProductsSampleGet(contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Use this API to get the details of a specific product. The product details will be displayed in JSON format.  You need to pass the product id in the endpoint URL for the successful call of the API. No other body parameters are required.  #### Path:   |                 **EXAMPLE**                 | |:------------------------------------------: | | https://apiv2.shiprocket.in/v1/external/products/show/17484610            |
         * @summary Get Specific Product Details
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExternalProductsShowProductIdGet(contentType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20039>> {
            const localVarAxiosArgs = await ProductsApiAxiosParamCreator(configuration).v1ExternalProductsShowProductIdGet(contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This API can be used to display a detailed list of all the products that you have in your Shiprocket account.  There are no required parameters to access this API. However, the displayed result can be filtered or sorted using additional parameters.  #### Parameters:  | **PARAMS**  | **REQUIRED**  |  **DATA TYPE**  |                                                       **DESCRIPTION**                                                       | **EXAMPLE**  | |:----------: |:------------: |:--------------: |:--------------------------------------------------------------------------------------------------------------------------: |:-----------: | |    `page`     |      NO       |    *integer*    |                                            The page number you want to display.                                             |      5       | |  `per_page`   |      NO       |    *integer*    |                                           The number of products to get per page.                                           |      2       | |    `sort`     |      NO       |    *string*     |                                        The order to sort by. Value: *ASC* or *DESC*                                         |     ASC      | |  ` sort_by`   |      NO       |    *string*     |  Allows you to choose the value field by which the items will be sorted.  Could be sorted by id, by sku, time created etc.  |     sku      | |   `filter`    |      NO       |    *string*     |                                        The data to be matched for the filter value.                                         |   11223344   | |  `filter_by`  |      NO       |    *string*     |                                        The filter value field . Can be id, sku, etc.                                        |      id      |
         * @summary Get All Products
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalProductsGet(contentType: string, options?: any): AxiosPromise<InlineResponse20038> {
            return ProductsApiFp(configuration).v1ExternalProductsGet(contentType, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to import your products in bulk from a .csv file.   No parameters are required. Choose the target file as required. You will receive an import id upon successful import operation.
         * @summary Bulk Import Products
         * @param {string} contentType 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalProductsImportPost(contentType: string, file: any, options?: any): AxiosPromise<InlineResponse2007> {
            return ProductsApiFp(configuration).v1ExternalProductsImportPost(contentType, file, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to add a new product to your Shiprocket account.   Provide the required product details and any additional info to successfully add a new product to your product list.  **Notes:**  - \'sku\' Id has to be unique. It cannot be the same as an existing sku.      - In case no category code is added, the code should be default.      - \'type\' field should be either \'single\' or \'multiple.\'       #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `sku` | YES | _string_ | Stock Keeping Unit or the identification unit of an individual product (generally alphanumeric). | bat123 | | `HSN` | NO | _string_ | Harmonised System Nomenclature. A code number is used to classify goods for taxation purposes. Done to determine which category of taxes do the goods come under. | 4412 | | `name` | YES | _string_ | Name of the product. | Batman Toy | | `tax_code` | NO | _string_ | The percentage of tax that is to be imposed. | 10 | | `type` | YES | _string_ | If there is only one product or multiple types of products. **Single** or **Multiple** | Single. | | `qty` | YES | _integer_ | Total Quantity of the products to be shipped. | 5 | | `low_stock` | NO | _string_ | Specifies when the low stock notification should come on | / | | `category_code` | YES | _string_ | You can add a category code to your ShipRocket account from “add category” | default | | `description` | NO | _string_ | Gives a description of the product. | Batman plastic toy. | | `brand` | NO | _string_ | The product brand name. | Bat | | `size` | NO | _integer_ | The size of the product. | 25 | | `weight` | NO | _integer_ | The weight of the product in kgs. | 0.5 | | `length` | NO | _integer_ | The length of the product in cms. | 10 | | `width` | NO | _integer_ | The width of the product in cms. | 5 | | `height` | NO | _integer_ | The height of the product in cms. | 15 | | `ean` | NO | _string_ | European Article Number - A barcode for product identification (which helps manufacturers identify how many products have been sold once a sale is made). It is 13 digits long and required for international selling. | / | | `upc` | NO | _string_ | Universal Product Code – Barcode for product identification which is used across the world. It is 12 digits long. | / | | `isbn` | NO | _string_ | International Standard Book Number – Identification barcode for books, magazines, e-books and other published media. It is 10 digits long. | / | | `color` | NO | _string_ | The colour of the product. | Black | | `imei_serialnumber` | NO | _string_ | The International Mobile Equipment Identity Number, which is used by a network to identify valid devices. E.g. if two iPhones have to be shipped, they will have 2 IMEI numbers | / | | `cost_price` | NO | _integer_ | The manufacture cost price of the product. | 500 | | `mrp` | NO | _string_ | Maximum Retail Price. How much is the maximum price which the product can be sold at. | 1000 | | `status` | NO | _boolean_ | In Boolean, if the product details have been successfully or unsuccessfully added. | 1 | | `image_url` | NO | _string_ | Shows the URL of the product images which have been uploaded. | / | | `qc_details` | NO | / | List of items and their relevant fields in the form of Array. | / | | `product_image` | CONDITIONAL YES | _string_ | Pickup agent will cross check theshared product with the actual product received from the buyer. Mandatory for all QC Products | [https://abc/xyz.jpg](https://abc/xyz.jpg) | | `brand` | CONDITIONAL YES | _string_ | The pickup agent will cross check the provided brand name visible on the item(s) or its packaging. | shiprocket | | `brand_tag` | CONDITIONAL YES | _string_ | The pickup agent will cross-check the provided brand name, which should match the brand tag affixed to the item(s) upon delivery. | shiprocket | | `color` | CONDITIONAL YES | _string_ | Pickup agent will cross check shared product color with the actual product received from the buyer. | green | | `size` | CONDITIONAL YES | _string_ | Pickup agent will cross check shared product size with the size on the label/tag. | L | | `product_imei` | CONDITIONAL YES | _string_ | It is a 15 digit unique number. It is displayed on the screen, on the box, or at the back of the appliance. This can be used to check production & garauntee of the appliance. | 0123456781234 | | `serial_no` | CONDITIONAL YES | _string_ | A serial number (SN) is a unique alphanumeric value assigned to each individual product. | 123456 |
         * @summary Add New Products
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalProductsPost(body?: string, options?: any): AxiosPromise<object> {
            return ProductsApiFp(configuration).v1ExternalProductsPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to convert an existing product to a QC product. The {productID} will be the \"id\" from the \"[Get all products](https://apidocs.shiprocket.in/#0b8d1f26-3abd-4f4e-9cd8-3928bcfcf30b)\" or \"[Get specific product details](https://apidocs.shiprocket.in/#134f7710-660c-464f-b579-6da46ba9402f)\" API.  #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `sku` | YES | _string_ | Stock Keeping Unit or the identification unit of an individual product (generally alphanumeric). | bat123 | | `product_image` | YES | _string_ | Pickup agent will cross check shared product color with the actual product received from the buyer. Mandatory for all QC Products | [https://abc/xyz.jpg](https://abc/xyz.jpg) | | `serial_no` | NO | _string_ | A serial number (SN) is a unique alphanumeric value assigned to each individual product. | 12345 | | `size` | NO | _string_ | Pickup agent will cross check shared product size with the size on the label/tag. | L | | `color` | NO | _string_ | Pickup agent will cross check shared product color with the actual product received from the buyer. | Green | | `brand` | NO | _integer_ | The pickup agent will cross-check the provided brand name visible on the item(s) or its packaging. | shiprocket | | `brand_box` | NO | _string_ | The pickup agent will cross-check the provided brand name, which should match the brand tag affixed to the item(s) upon delivery | shiprocket | | `product_imei` | NO | _string_ | \"It is a 15-digit unique number. It is displayed on the screen, on the box, or at the back of the appliance. This can be used to check production & guarantee of the appliance. | 1234567890 |
         * @summary Convert to QC Product
         * @param {string} contentType 
         * @param {string} [authorization] 
         * @param {InlineObject9} [inlineObject9] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalProductsQcProductUpdateProductIDPost(contentType: string, authorization?: string, inlineObject9?: InlineObject9, options?: any): AxiosPromise<InlineResponse20040> {
            return ProductsApiFp(configuration).v1ExternalProductsQcProductUpdateProductIDPost(contentType, authorization, inlineObject9, options).then((request) => request(axios, basePath));
        },
        /**
         * This API will provide a sample format for a CSV file that can be used for importing orders. You can use this format to create your CSV file, which you want to use to import products into your Shiprocket account.  No additional parameters are required.
         * @summary Get Sample .csv Format
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalProductsSampleGet(contentType: string, options?: any): AxiosPromise<object> {
            return ProductsApiFp(configuration).v1ExternalProductsSampleGet(contentType, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to get the details of a specific product. The product details will be displayed in JSON format.  You need to pass the product id in the endpoint URL for the successful call of the API. No other body parameters are required.  #### Path:   |                 **EXAMPLE**                 | |:------------------------------------------: | | https://apiv2.shiprocket.in/v1/external/products/show/17484610            |
         * @summary Get Specific Product Details
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalProductsShowProductIdGet(contentType: string, options?: any): AxiosPromise<InlineResponse20039> {
            return ProductsApiFp(configuration).v1ExternalProductsShowProductIdGet(contentType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsApi - interface
 * @export
 * @interface ProductsApi
 */
export interface ProductsApiInterface {
    /**
     * This API can be used to display a detailed list of all the products that you have in your Shiprocket account.  There are no required parameters to access this API. However, the displayed result can be filtered or sorted using additional parameters.  #### Parameters:  | **PARAMS**  | **REQUIRED**  |  **DATA TYPE**  |                                                       **DESCRIPTION**                                                       | **EXAMPLE**  | |:----------: |:------------: |:--------------: |:--------------------------------------------------------------------------------------------------------------------------: |:-----------: | |    `page`     |      NO       |    *integer*    |                                            The page number you want to display.                                             |      5       | |  `per_page`   |      NO       |    *integer*    |                                           The number of products to get per page.                                           |      2       | |    `sort`     |      NO       |    *string*     |                                        The order to sort by. Value: *ASC* or *DESC*                                         |     ASC      | |  ` sort_by`   |      NO       |    *string*     |  Allows you to choose the value field by which the items will be sorted.  Could be sorted by id, by sku, time created etc.  |     sku      | |   `filter`    |      NO       |    *string*     |                                        The data to be matched for the filter value.                                         |   11223344   | |  `filter_by`  |      NO       |    *string*     |                                        The filter value field . Can be id, sku, etc.                                        |      id      |
     * @summary Get All Products
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    v1ExternalProductsGet(contentType: string, options?: any): AxiosPromise<InlineResponse20038>;

    /**
     * Use this API to import your products in bulk from a .csv file.   No parameters are required. Choose the target file as required. You will receive an import id upon successful import operation.
     * @summary Bulk Import Products
     * @param {string} contentType 
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    v1ExternalProductsImportPost(contentType: string, file: any, options?: any): AxiosPromise<InlineResponse2007>;

    /**
     * Use this API to add a new product to your Shiprocket account.   Provide the required product details and any additional info to successfully add a new product to your product list.  **Notes:**  - \'sku\' Id has to be unique. It cannot be the same as an existing sku.      - In case no category code is added, the code should be default.      - \'type\' field should be either \'single\' or \'multiple.\'       #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `sku` | YES | _string_ | Stock Keeping Unit or the identification unit of an individual product (generally alphanumeric). | bat123 | | `HSN` | NO | _string_ | Harmonised System Nomenclature. A code number is used to classify goods for taxation purposes. Done to determine which category of taxes do the goods come under. | 4412 | | `name` | YES | _string_ | Name of the product. | Batman Toy | | `tax_code` | NO | _string_ | The percentage of tax that is to be imposed. | 10 | | `type` | YES | _string_ | If there is only one product or multiple types of products. **Single** or **Multiple** | Single. | | `qty` | YES | _integer_ | Total Quantity of the products to be shipped. | 5 | | `low_stock` | NO | _string_ | Specifies when the low stock notification should come on | / | | `category_code` | YES | _string_ | You can add a category code to your ShipRocket account from “add category” | default | | `description` | NO | _string_ | Gives a description of the product. | Batman plastic toy. | | `brand` | NO | _string_ | The product brand name. | Bat | | `size` | NO | _integer_ | The size of the product. | 25 | | `weight` | NO | _integer_ | The weight of the product in kgs. | 0.5 | | `length` | NO | _integer_ | The length of the product in cms. | 10 | | `width` | NO | _integer_ | The width of the product in cms. | 5 | | `height` | NO | _integer_ | The height of the product in cms. | 15 | | `ean` | NO | _string_ | European Article Number - A barcode for product identification (which helps manufacturers identify how many products have been sold once a sale is made). It is 13 digits long and required for international selling. | / | | `upc` | NO | _string_ | Universal Product Code – Barcode for product identification which is used across the world. It is 12 digits long. | / | | `isbn` | NO | _string_ | International Standard Book Number – Identification barcode for books, magazines, e-books and other published media. It is 10 digits long. | / | | `color` | NO | _string_ | The colour of the product. | Black | | `imei_serialnumber` | NO | _string_ | The International Mobile Equipment Identity Number, which is used by a network to identify valid devices. E.g. if two iPhones have to be shipped, they will have 2 IMEI numbers | / | | `cost_price` | NO | _integer_ | The manufacture cost price of the product. | 500 | | `mrp` | NO | _string_ | Maximum Retail Price. How much is the maximum price which the product can be sold at. | 1000 | | `status` | NO | _boolean_ | In Boolean, if the product details have been successfully or unsuccessfully added. | 1 | | `image_url` | NO | _string_ | Shows the URL of the product images which have been uploaded. | / | | `qc_details` | NO | / | List of items and their relevant fields in the form of Array. | / | | `product_image` | CONDITIONAL YES | _string_ | Pickup agent will cross check theshared product with the actual product received from the buyer. Mandatory for all QC Products | [https://abc/xyz.jpg](https://abc/xyz.jpg) | | `brand` | CONDITIONAL YES | _string_ | The pickup agent will cross check the provided brand name visible on the item(s) or its packaging. | shiprocket | | `brand_tag` | CONDITIONAL YES | _string_ | The pickup agent will cross-check the provided brand name, which should match the brand tag affixed to the item(s) upon delivery. | shiprocket | | `color` | CONDITIONAL YES | _string_ | Pickup agent will cross check shared product color with the actual product received from the buyer. | green | | `size` | CONDITIONAL YES | _string_ | Pickup agent will cross check shared product size with the size on the label/tag. | L | | `product_imei` | CONDITIONAL YES | _string_ | It is a 15 digit unique number. It is displayed on the screen, on the box, or at the back of the appliance. This can be used to check production & garauntee of the appliance. | 0123456781234 | | `serial_no` | CONDITIONAL YES | _string_ | A serial number (SN) is a unique alphanumeric value assigned to each individual product. | 123456 |
     * @summary Add New Products
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    v1ExternalProductsPost(body?: string, options?: any): AxiosPromise<object>;

    /**
     * Use this API to convert an existing product to a QC product. The {productID} will be the \"id\" from the \"[Get all products](https://apidocs.shiprocket.in/#0b8d1f26-3abd-4f4e-9cd8-3928bcfcf30b)\" or \"[Get specific product details](https://apidocs.shiprocket.in/#134f7710-660c-464f-b579-6da46ba9402f)\" API.  #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `sku` | YES | _string_ | Stock Keeping Unit or the identification unit of an individual product (generally alphanumeric). | bat123 | | `product_image` | YES | _string_ | Pickup agent will cross check shared product color with the actual product received from the buyer. Mandatory for all QC Products | [https://abc/xyz.jpg](https://abc/xyz.jpg) | | `serial_no` | NO | _string_ | A serial number (SN) is a unique alphanumeric value assigned to each individual product. | 12345 | | `size` | NO | _string_ | Pickup agent will cross check shared product size with the size on the label/tag. | L | | `color` | NO | _string_ | Pickup agent will cross check shared product color with the actual product received from the buyer. | Green | | `brand` | NO | _integer_ | The pickup agent will cross-check the provided brand name visible on the item(s) or its packaging. | shiprocket | | `brand_box` | NO | _string_ | The pickup agent will cross-check the provided brand name, which should match the brand tag affixed to the item(s) upon delivery | shiprocket | | `product_imei` | NO | _string_ | \"It is a 15-digit unique number. It is displayed on the screen, on the box, or at the back of the appliance. This can be used to check production & guarantee of the appliance. | 1234567890 |
     * @summary Convert to QC Product
     * @param {string} contentType 
     * @param {string} [authorization] 
     * @param {InlineObject9} [inlineObject9] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    v1ExternalProductsQcProductUpdateProductIDPost(contentType: string, authorization?: string, inlineObject9?: InlineObject9, options?: any): AxiosPromise<InlineResponse20040>;

    /**
     * This API will provide a sample format for a CSV file that can be used for importing orders. You can use this format to create your CSV file, which you want to use to import products into your Shiprocket account.  No additional parameters are required.
     * @summary Get Sample .csv Format
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    v1ExternalProductsSampleGet(contentType: string, options?: any): AxiosPromise<object>;

    /**
     * Use this API to get the details of a specific product. The product details will be displayed in JSON format.  You need to pass the product id in the endpoint URL for the successful call of the API. No other body parameters are required.  #### Path:   |                 **EXAMPLE**                 | |:------------------------------------------: | | https://apiv2.shiprocket.in/v1/external/products/show/17484610            |
     * @summary Get Specific Product Details
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    v1ExternalProductsShowProductIdGet(contentType: string, options?: any): AxiosPromise<InlineResponse20039>;

}

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI implements ProductsApiInterface {
    /**
     * This API can be used to display a detailed list of all the products that you have in your Shiprocket account.  There are no required parameters to access this API. However, the displayed result can be filtered or sorted using additional parameters.  #### Parameters:  | **PARAMS**  | **REQUIRED**  |  **DATA TYPE**  |                                                       **DESCRIPTION**                                                       | **EXAMPLE**  | |:----------: |:------------: |:--------------: |:--------------------------------------------------------------------------------------------------------------------------: |:-----------: | |    `page`     |      NO       |    *integer*    |                                            The page number you want to display.                                             |      5       | |  `per_page`   |      NO       |    *integer*    |                                           The number of products to get per page.                                           |      2       | |    `sort`     |      NO       |    *string*     |                                        The order to sort by. Value: *ASC* or *DESC*                                         |     ASC      | |  ` sort_by`   |      NO       |    *string*     |  Allows you to choose the value field by which the items will be sorted.  Could be sorted by id, by sku, time created etc.  |     sku      | |   `filter`    |      NO       |    *string*     |                                        The data to be matched for the filter value.                                         |   11223344   | |  `filter_by`  |      NO       |    *string*     |                                        The filter value field . Can be id, sku, etc.                                        |      id      |
     * @summary Get All Products
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public v1ExternalProductsGet(contentType: string, options?: any) {
        return ProductsApiFp(this.configuration).v1ExternalProductsGet(contentType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to import your products in bulk from a .csv file.   No parameters are required. Choose the target file as required. You will receive an import id upon successful import operation.
     * @summary Bulk Import Products
     * @param {string} contentType 
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public v1ExternalProductsImportPost(contentType: string, file: any, options?: any) {
        return ProductsApiFp(this.configuration).v1ExternalProductsImportPost(contentType, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to add a new product to your Shiprocket account.   Provide the required product details and any additional info to successfully add a new product to your product list.  **Notes:**  - \'sku\' Id has to be unique. It cannot be the same as an existing sku.      - In case no category code is added, the code should be default.      - \'type\' field should be either \'single\' or \'multiple.\'       #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `sku` | YES | _string_ | Stock Keeping Unit or the identification unit of an individual product (generally alphanumeric). | bat123 | | `HSN` | NO | _string_ | Harmonised System Nomenclature. A code number is used to classify goods for taxation purposes. Done to determine which category of taxes do the goods come under. | 4412 | | `name` | YES | _string_ | Name of the product. | Batman Toy | | `tax_code` | NO | _string_ | The percentage of tax that is to be imposed. | 10 | | `type` | YES | _string_ | If there is only one product or multiple types of products. **Single** or **Multiple** | Single. | | `qty` | YES | _integer_ | Total Quantity of the products to be shipped. | 5 | | `low_stock` | NO | _string_ | Specifies when the low stock notification should come on | / | | `category_code` | YES | _string_ | You can add a category code to your ShipRocket account from “add category” | default | | `description` | NO | _string_ | Gives a description of the product. | Batman plastic toy. | | `brand` | NO | _string_ | The product brand name. | Bat | | `size` | NO | _integer_ | The size of the product. | 25 | | `weight` | NO | _integer_ | The weight of the product in kgs. | 0.5 | | `length` | NO | _integer_ | The length of the product in cms. | 10 | | `width` | NO | _integer_ | The width of the product in cms. | 5 | | `height` | NO | _integer_ | The height of the product in cms. | 15 | | `ean` | NO | _string_ | European Article Number - A barcode for product identification (which helps manufacturers identify how many products have been sold once a sale is made). It is 13 digits long and required for international selling. | / | | `upc` | NO | _string_ | Universal Product Code – Barcode for product identification which is used across the world. It is 12 digits long. | / | | `isbn` | NO | _string_ | International Standard Book Number – Identification barcode for books, magazines, e-books and other published media. It is 10 digits long. | / | | `color` | NO | _string_ | The colour of the product. | Black | | `imei_serialnumber` | NO | _string_ | The International Mobile Equipment Identity Number, which is used by a network to identify valid devices. E.g. if two iPhones have to be shipped, they will have 2 IMEI numbers | / | | `cost_price` | NO | _integer_ | The manufacture cost price of the product. | 500 | | `mrp` | NO | _string_ | Maximum Retail Price. How much is the maximum price which the product can be sold at. | 1000 | | `status` | NO | _boolean_ | In Boolean, if the product details have been successfully or unsuccessfully added. | 1 | | `image_url` | NO | _string_ | Shows the URL of the product images which have been uploaded. | / | | `qc_details` | NO | / | List of items and their relevant fields in the form of Array. | / | | `product_image` | CONDITIONAL YES | _string_ | Pickup agent will cross check theshared product with the actual product received from the buyer. Mandatory for all QC Products | [https://abc/xyz.jpg](https://abc/xyz.jpg) | | `brand` | CONDITIONAL YES | _string_ | The pickup agent will cross check the provided brand name visible on the item(s) or its packaging. | shiprocket | | `brand_tag` | CONDITIONAL YES | _string_ | The pickup agent will cross-check the provided brand name, which should match the brand tag affixed to the item(s) upon delivery. | shiprocket | | `color` | CONDITIONAL YES | _string_ | Pickup agent will cross check shared product color with the actual product received from the buyer. | green | | `size` | CONDITIONAL YES | _string_ | Pickup agent will cross check shared product size with the size on the label/tag. | L | | `product_imei` | CONDITIONAL YES | _string_ | It is a 15 digit unique number. It is displayed on the screen, on the box, or at the back of the appliance. This can be used to check production & garauntee of the appliance. | 0123456781234 | | `serial_no` | CONDITIONAL YES | _string_ | A serial number (SN) is a unique alphanumeric value assigned to each individual product. | 123456 |
     * @summary Add New Products
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public v1ExternalProductsPost(body?: string, options?: any) {
        return ProductsApiFp(this.configuration).v1ExternalProductsPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to convert an existing product to a QC product. The {productID} will be the \"id\" from the \"[Get all products](https://apidocs.shiprocket.in/#0b8d1f26-3abd-4f4e-9cd8-3928bcfcf30b)\" or \"[Get specific product details](https://apidocs.shiprocket.in/#134f7710-660c-464f-b579-6da46ba9402f)\" API.  #### Parameters:  | **PARAMS** | **REQUIRED** | **DATA TYPE** | **DESCRIPTION** | **EXAMPLE** | | --- | --- | --- | --- | --- | | `sku` | YES | _string_ | Stock Keeping Unit or the identification unit of an individual product (generally alphanumeric). | bat123 | | `product_image` | YES | _string_ | Pickup agent will cross check shared product color with the actual product received from the buyer. Mandatory for all QC Products | [https://abc/xyz.jpg](https://abc/xyz.jpg) | | `serial_no` | NO | _string_ | A serial number (SN) is a unique alphanumeric value assigned to each individual product. | 12345 | | `size` | NO | _string_ | Pickup agent will cross check shared product size with the size on the label/tag. | L | | `color` | NO | _string_ | Pickup agent will cross check shared product color with the actual product received from the buyer. | Green | | `brand` | NO | _integer_ | The pickup agent will cross-check the provided brand name visible on the item(s) or its packaging. | shiprocket | | `brand_box` | NO | _string_ | The pickup agent will cross-check the provided brand name, which should match the brand tag affixed to the item(s) upon delivery | shiprocket | | `product_imei` | NO | _string_ | \"It is a 15-digit unique number. It is displayed on the screen, on the box, or at the back of the appliance. This can be used to check production & guarantee of the appliance. | 1234567890 |
     * @summary Convert to QC Product
     * @param {string} contentType 
     * @param {string} [authorization] 
     * @param {InlineObject9} [inlineObject9] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public v1ExternalProductsQcProductUpdateProductIDPost(contentType: string, authorization?: string, inlineObject9?: InlineObject9, options?: any) {
        return ProductsApiFp(this.configuration).v1ExternalProductsQcProductUpdateProductIDPost(contentType, authorization, inlineObject9, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API will provide a sample format for a CSV file that can be used for importing orders. You can use this format to create your CSV file, which you want to use to import products into your Shiprocket account.  No additional parameters are required.
     * @summary Get Sample .csv Format
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public v1ExternalProductsSampleGet(contentType: string, options?: any) {
        return ProductsApiFp(this.configuration).v1ExternalProductsSampleGet(contentType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to get the details of a specific product. The product details will be displayed in JSON format.  You need to pass the product id in the endpoint URL for the successful call of the API. No other body parameters are required.  #### Path:   |                 **EXAMPLE**                 | |:------------------------------------------: | | https://apiv2.shiprocket.in/v1/external/products/show/17484610            |
     * @summary Get Specific Product Details
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public v1ExternalProductsShowProductIdGet(contentType: string, options?: any) {
        return ProductsApiFp(this.configuration).v1ExternalProductsShowProductIdGet(contentType, options).then((request) => request(this.axios, this.basePath));
    }

}
