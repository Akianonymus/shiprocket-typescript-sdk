// tslint:disable
/**
 * shiprocket
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InlineResponse20041 } from '../models';
// @ts-ignore
import { InlineResponse20042 } from '../models';
// @ts-ignore
import { InlineResponse2007 } from '../models';
// @ts-ignore
import { InlineResponse403 } from '../models';
/**
 * ListingsApi - axios parameter creator
 * @export
 */
export const ListingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API downloads the list of mapped items in your channel catalogue sheet. After mapping the items, you can see the number of products in one channel present in the Master Catalogue.  The downloaded CSV file URL is shared as the response. No other body parameters are required.
         * @summary Export Mapped Products
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalListingsExportMappedGet: async (contentType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling v1ExternalListingsExportMappedGet.');
            }
            const localVarPath = `/v1/external/listings/export/mapped`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all the unmapped products in your channel catalogue using this API.  The list is downloaded into a CSV file, and the download URL is displayed as the response. No other body parameters are required.
         * @summary Export Unmapped Products
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalListingsExportUnmappedGet: async (contentType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling v1ExternalListingsExportUnmappedGet.');
            }
            const localVarPath = `/v1/external/listings/export/unmapped`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API can be used to get a JSON representation of all the product listings in your Shiprocket account, i.e., all the products associated with a specific channel.  No parameters are required to access this API. However, the displayed data can be filtered and sorted using further parameters. If no sort parameter is used, the data is displayed in the default format.  #### Parameters:  | **PARAMS**  | **REQUIRED**  |  **DATA TYPE**  |                                                       **DESCRIPTION**                                                       | **EXAMPLE**  | |:----------: |:------------: |:--------------: |:--------------------------------------------------------------------------------------------------------------------------: |:-----------: | |    `page`     |      NO       |    *integer*    |                                            The page number you want to display.                                             |      5       | |  `per_page`   |      NO       |    *integer*    |                                           The number of listings to get per page.                                           |      2       | |    `sort`     |      NO       |    *string*     |                                        The order to sort by. *Value*: **ASC** or **DESC**                                         |     ASC      | |   `sort_by`   |      NO       |    *string*     |  Allows you to choose the value field by which the listings will be sorted.  Could be sorted by id, by sku, time created etc.  |     sku      | |   `filter`    |      NO       |    *string*     |                                        The data to be matched for the filter value.                                         |   11223344   | |  `filter_by`  |      NO       |    *string*     |                                        The filter value field . Can be id, sku, etc.                                        |      id      |
         * @summary Get All  Listings
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalListingsGet: async (contentType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling v1ExternalListingsGet.');
            }
            const localVarPath = `/v1/external/listings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to import a CSV file containing channel catalogue to the master catalogue mappings.  No other body parameters are required.
         * @summary Import Catalog Mappings
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalListingsImportPost: async (file: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling v1ExternalListingsImportPost.');
            }
            const localVarPath = `/v1/external/listings/import`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to map a product present in the channel catalogue to a product present in the master catalogue.  Pass the product and listing id for the successful call of the API  #### Parameters:  | **PARAMS**  | **REQUIRED**  | **DATA TYPE**  | **DESCRIPTION**  | **EXAMPLE**  | |:------------: |-------------- |--------------- |----------------------------------------------- |------------- | | `product_id`  | YES  | *integer*  | The id of item in the master catalog.  | 17908342  | | `listing_id`  | YES  | *integer*  | The id of the product in the channel catalog.  | 15897064  | | `ID`  | NO  | *integer*  | The id placed in the respective \'GET\' codes.  | 15897064  |
         * @summary Map Channel Product
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalListingsLinkPost: async (body?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/external/listings/link`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'text/plain';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API displays the download link of a sample catalogue sheet for reference purposes.  No additional parameters are required.
         * @summary Export Catalog Sample
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalListingsSampleGet: async (contentType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling v1ExternalListingsSampleGet.');
            }
            const localVarPath = `/v1/external/listings/sample`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListingsApi - functional programming interface
 * @export
 */
export const ListingsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This API downloads the list of mapped items in your channel catalogue sheet. After mapping the items, you can see the number of products in one channel present in the Master Catalogue.  The downloaded CSV file URL is shared as the response. No other body parameters are required.
         * @summary Export Mapped Products
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExternalListingsExportMappedGet(contentType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20042>> {
            const localVarAxiosArgs = await ListingsApiAxiosParamCreator(configuration).v1ExternalListingsExportMappedGet(contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of all the unmapped products in your channel catalogue using this API.  The list is downloaded into a CSV file, and the download URL is displayed as the response. No other body parameters are required.
         * @summary Export Unmapped Products
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExternalListingsExportUnmappedGet(contentType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20042>> {
            const localVarAxiosArgs = await ListingsApiAxiosParamCreator(configuration).v1ExternalListingsExportUnmappedGet(contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This API can be used to get a JSON representation of all the product listings in your Shiprocket account, i.e., all the products associated with a specific channel.  No parameters are required to access this API. However, the displayed data can be filtered and sorted using further parameters. If no sort parameter is used, the data is displayed in the default format.  #### Parameters:  | **PARAMS**  | **REQUIRED**  |  **DATA TYPE**  |                                                       **DESCRIPTION**                                                       | **EXAMPLE**  | |:----------: |:------------: |:--------------: |:--------------------------------------------------------------------------------------------------------------------------: |:-----------: | |    `page`     |      NO       |    *integer*    |                                            The page number you want to display.                                             |      5       | |  `per_page`   |      NO       |    *integer*    |                                           The number of listings to get per page.                                           |      2       | |    `sort`     |      NO       |    *string*     |                                        The order to sort by. *Value*: **ASC** or **DESC**                                         |     ASC      | |   `sort_by`   |      NO       |    *string*     |  Allows you to choose the value field by which the listings will be sorted.  Could be sorted by id, by sku, time created etc.  |     sku      | |   `filter`    |      NO       |    *string*     |                                        The data to be matched for the filter value.                                         |   11223344   | |  `filter_by`  |      NO       |    *string*     |                                        The filter value field . Can be id, sku, etc.                                        |      id      |
         * @summary Get All  Listings
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExternalListingsGet(contentType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20041>> {
            const localVarAxiosArgs = await ListingsApiAxiosParamCreator(configuration).v1ExternalListingsGet(contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Use this API to import a CSV file containing channel catalogue to the master catalogue mappings.  No other body parameters are required.
         * @summary Import Catalog Mappings
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExternalListingsImportPost(file: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2007>> {
            const localVarAxiosArgs = await ListingsApiAxiosParamCreator(configuration).v1ExternalListingsImportPost(file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Use this API to map a product present in the channel catalogue to a product present in the master catalogue.  Pass the product and listing id for the successful call of the API  #### Parameters:  | **PARAMS**  | **REQUIRED**  | **DATA TYPE**  | **DESCRIPTION**  | **EXAMPLE**  | |:------------: |-------------- |--------------- |----------------------------------------------- |------------- | | `product_id`  | YES  | *integer*  | The id of item in the master catalog.  | 17908342  | | `listing_id`  | YES  | *integer*  | The id of the product in the channel catalog.  | 15897064  | | `ID`  | NO  | *integer*  | The id placed in the respective \'GET\' codes.  | 15897064  |
         * @summary Map Channel Product
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExternalListingsLinkPost(body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse403>> {
            const localVarAxiosArgs = await ListingsApiAxiosParamCreator(configuration).v1ExternalListingsLinkPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This API displays the download link of a sample catalogue sheet for reference purposes.  No additional parameters are required.
         * @summary Export Catalog Sample
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExternalListingsSampleGet(contentType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20042>> {
            const localVarAxiosArgs = await ListingsApiAxiosParamCreator(configuration).v1ExternalListingsSampleGet(contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ListingsApi - factory interface
 * @export
 */
export const ListingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This API downloads the list of mapped items in your channel catalogue sheet. After mapping the items, you can see the number of products in one channel present in the Master Catalogue.  The downloaded CSV file URL is shared as the response. No other body parameters are required.
         * @summary Export Mapped Products
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalListingsExportMappedGet(contentType: string, options?: any): AxiosPromise<InlineResponse20042> {
            return ListingsApiFp(configuration).v1ExternalListingsExportMappedGet(contentType, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all the unmapped products in your channel catalogue using this API.  The list is downloaded into a CSV file, and the download URL is displayed as the response. No other body parameters are required.
         * @summary Export Unmapped Products
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalListingsExportUnmappedGet(contentType: string, options?: any): AxiosPromise<InlineResponse20042> {
            return ListingsApiFp(configuration).v1ExternalListingsExportUnmappedGet(contentType, options).then((request) => request(axios, basePath));
        },
        /**
         * This API can be used to get a JSON representation of all the product listings in your Shiprocket account, i.e., all the products associated with a specific channel.  No parameters are required to access this API. However, the displayed data can be filtered and sorted using further parameters. If no sort parameter is used, the data is displayed in the default format.  #### Parameters:  | **PARAMS**  | **REQUIRED**  |  **DATA TYPE**  |                                                       **DESCRIPTION**                                                       | **EXAMPLE**  | |:----------: |:------------: |:--------------: |:--------------------------------------------------------------------------------------------------------------------------: |:-----------: | |    `page`     |      NO       |    *integer*    |                                            The page number you want to display.                                             |      5       | |  `per_page`   |      NO       |    *integer*    |                                           The number of listings to get per page.                                           |      2       | |    `sort`     |      NO       |    *string*     |                                        The order to sort by. *Value*: **ASC** or **DESC**                                         |     ASC      | |   `sort_by`   |      NO       |    *string*     |  Allows you to choose the value field by which the listings will be sorted.  Could be sorted by id, by sku, time created etc.  |     sku      | |   `filter`    |      NO       |    *string*     |                                        The data to be matched for the filter value.                                         |   11223344   | |  `filter_by`  |      NO       |    *string*     |                                        The filter value field . Can be id, sku, etc.                                        |      id      |
         * @summary Get All  Listings
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalListingsGet(contentType: string, options?: any): AxiosPromise<InlineResponse20041> {
            return ListingsApiFp(configuration).v1ExternalListingsGet(contentType, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to import a CSV file containing channel catalogue to the master catalogue mappings.  No other body parameters are required.
         * @summary Import Catalog Mappings
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalListingsImportPost(file: any, options?: any): AxiosPromise<InlineResponse2007> {
            return ListingsApiFp(configuration).v1ExternalListingsImportPost(file, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to map a product present in the channel catalogue to a product present in the master catalogue.  Pass the product and listing id for the successful call of the API  #### Parameters:  | **PARAMS**  | **REQUIRED**  | **DATA TYPE**  | **DESCRIPTION**  | **EXAMPLE**  | |:------------: |-------------- |--------------- |----------------------------------------------- |------------- | | `product_id`  | YES  | *integer*  | The id of item in the master catalog.  | 17908342  | | `listing_id`  | YES  | *integer*  | The id of the product in the channel catalog.  | 15897064  | | `ID`  | NO  | *integer*  | The id placed in the respective \'GET\' codes.  | 15897064  |
         * @summary Map Channel Product
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalListingsLinkPost(body?: string, options?: any): AxiosPromise<InlineResponse403> {
            return ListingsApiFp(configuration).v1ExternalListingsLinkPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This API displays the download link of a sample catalogue sheet for reference purposes.  No additional parameters are required.
         * @summary Export Catalog Sample
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalListingsSampleGet(contentType: string, options?: any): AxiosPromise<InlineResponse20042> {
            return ListingsApiFp(configuration).v1ExternalListingsSampleGet(contentType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListingsApi - interface
 * @export
 * @interface ListingsApi
 */
export interface ListingsApiInterface {
    /**
     * This API downloads the list of mapped items in your channel catalogue sheet. After mapping the items, you can see the number of products in one channel present in the Master Catalogue.  The downloaded CSV file URL is shared as the response. No other body parameters are required.
     * @summary Export Mapped Products
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApiInterface
     */
    v1ExternalListingsExportMappedGet(contentType: string, options?: any): AxiosPromise<InlineResponse20042>;

    /**
     * Get a list of all the unmapped products in your channel catalogue using this API.  The list is downloaded into a CSV file, and the download URL is displayed as the response. No other body parameters are required.
     * @summary Export Unmapped Products
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApiInterface
     */
    v1ExternalListingsExportUnmappedGet(contentType: string, options?: any): AxiosPromise<InlineResponse20042>;

    /**
     * This API can be used to get a JSON representation of all the product listings in your Shiprocket account, i.e., all the products associated with a specific channel.  No parameters are required to access this API. However, the displayed data can be filtered and sorted using further parameters. If no sort parameter is used, the data is displayed in the default format.  #### Parameters:  | **PARAMS**  | **REQUIRED**  |  **DATA TYPE**  |                                                       **DESCRIPTION**                                                       | **EXAMPLE**  | |:----------: |:------------: |:--------------: |:--------------------------------------------------------------------------------------------------------------------------: |:-----------: | |    `page`     |      NO       |    *integer*    |                                            The page number you want to display.                                             |      5       | |  `per_page`   |      NO       |    *integer*    |                                           The number of listings to get per page.                                           |      2       | |    `sort`     |      NO       |    *string*     |                                        The order to sort by. *Value*: **ASC** or **DESC**                                         |     ASC      | |   `sort_by`   |      NO       |    *string*     |  Allows you to choose the value field by which the listings will be sorted.  Could be sorted by id, by sku, time created etc.  |     sku      | |   `filter`    |      NO       |    *string*     |                                        The data to be matched for the filter value.                                         |   11223344   | |  `filter_by`  |      NO       |    *string*     |                                        The filter value field . Can be id, sku, etc.                                        |      id      |
     * @summary Get All  Listings
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApiInterface
     */
    v1ExternalListingsGet(contentType: string, options?: any): AxiosPromise<InlineResponse20041>;

    /**
     * Use this API to import a CSV file containing channel catalogue to the master catalogue mappings.  No other body parameters are required.
     * @summary Import Catalog Mappings
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApiInterface
     */
    v1ExternalListingsImportPost(file: any, options?: any): AxiosPromise<InlineResponse2007>;

    /**
     * Use this API to map a product present in the channel catalogue to a product present in the master catalogue.  Pass the product and listing id for the successful call of the API  #### Parameters:  | **PARAMS**  | **REQUIRED**  | **DATA TYPE**  | **DESCRIPTION**  | **EXAMPLE**  | |:------------: |-------------- |--------------- |----------------------------------------------- |------------- | | `product_id`  | YES  | *integer*  | The id of item in the master catalog.  | 17908342  | | `listing_id`  | YES  | *integer*  | The id of the product in the channel catalog.  | 15897064  | | `ID`  | NO  | *integer*  | The id placed in the respective \'GET\' codes.  | 15897064  |
     * @summary Map Channel Product
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApiInterface
     */
    v1ExternalListingsLinkPost(body?: string, options?: any): AxiosPromise<InlineResponse403>;

    /**
     * This API displays the download link of a sample catalogue sheet for reference purposes.  No additional parameters are required.
     * @summary Export Catalog Sample
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApiInterface
     */
    v1ExternalListingsSampleGet(contentType: string, options?: any): AxiosPromise<InlineResponse20042>;

}

/**
 * ListingsApi - object-oriented interface
 * @export
 * @class ListingsApi
 * @extends {BaseAPI}
 */
export class ListingsApi extends BaseAPI implements ListingsApiInterface {
    /**
     * This API downloads the list of mapped items in your channel catalogue sheet. After mapping the items, you can see the number of products in one channel present in the Master Catalogue.  The downloaded CSV file URL is shared as the response. No other body parameters are required.
     * @summary Export Mapped Products
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    public v1ExternalListingsExportMappedGet(contentType: string, options?: any) {
        return ListingsApiFp(this.configuration).v1ExternalListingsExportMappedGet(contentType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all the unmapped products in your channel catalogue using this API.  The list is downloaded into a CSV file, and the download URL is displayed as the response. No other body parameters are required.
     * @summary Export Unmapped Products
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    public v1ExternalListingsExportUnmappedGet(contentType: string, options?: any) {
        return ListingsApiFp(this.configuration).v1ExternalListingsExportUnmappedGet(contentType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API can be used to get a JSON representation of all the product listings in your Shiprocket account, i.e., all the products associated with a specific channel.  No parameters are required to access this API. However, the displayed data can be filtered and sorted using further parameters. If no sort parameter is used, the data is displayed in the default format.  #### Parameters:  | **PARAMS**  | **REQUIRED**  |  **DATA TYPE**  |                                                       **DESCRIPTION**                                                       | **EXAMPLE**  | |:----------: |:------------: |:--------------: |:--------------------------------------------------------------------------------------------------------------------------: |:-----------: | |    `page`     |      NO       |    *integer*    |                                            The page number you want to display.                                             |      5       | |  `per_page`   |      NO       |    *integer*    |                                           The number of listings to get per page.                                           |      2       | |    `sort`     |      NO       |    *string*     |                                        The order to sort by. *Value*: **ASC** or **DESC**                                         |     ASC      | |   `sort_by`   |      NO       |    *string*     |  Allows you to choose the value field by which the listings will be sorted.  Could be sorted by id, by sku, time created etc.  |     sku      | |   `filter`    |      NO       |    *string*     |                                        The data to be matched for the filter value.                                         |   11223344   | |  `filter_by`  |      NO       |    *string*     |                                        The filter value field . Can be id, sku, etc.                                        |      id      |
     * @summary Get All  Listings
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    public v1ExternalListingsGet(contentType: string, options?: any) {
        return ListingsApiFp(this.configuration).v1ExternalListingsGet(contentType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to import a CSV file containing channel catalogue to the master catalogue mappings.  No other body parameters are required.
     * @summary Import Catalog Mappings
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    public v1ExternalListingsImportPost(file: any, options?: any) {
        return ListingsApiFp(this.configuration).v1ExternalListingsImportPost(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to map a product present in the channel catalogue to a product present in the master catalogue.  Pass the product and listing id for the successful call of the API  #### Parameters:  | **PARAMS**  | **REQUIRED**  | **DATA TYPE**  | **DESCRIPTION**  | **EXAMPLE**  | |:------------: |-------------- |--------------- |----------------------------------------------- |------------- | | `product_id`  | YES  | *integer*  | The id of item in the master catalog.  | 17908342  | | `listing_id`  | YES  | *integer*  | The id of the product in the channel catalog.  | 15897064  | | `ID`  | NO  | *integer*  | The id placed in the respective \'GET\' codes.  | 15897064  |
     * @summary Map Channel Product
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    public v1ExternalListingsLinkPost(body?: string, options?: any) {
        return ListingsApiFp(this.configuration).v1ExternalListingsLinkPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API displays the download link of a sample catalogue sheet for reference purposes.  No additional parameters are required.
     * @summary Export Catalog Sample
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    public v1ExternalListingsSampleGet(contentType: string, options?: any) {
        return ListingsApiFp(this.configuration).v1ExternalListingsSampleGet(contentType, options).then((request) => request(this.axios, this.basePath));
    }

}
