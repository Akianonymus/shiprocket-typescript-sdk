// tslint:disable
/**
 * shiprocket
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InlineResponse20044 } from '../models';
// @ts-ignore
import { InlineResponse20045 } from '../models';
// @ts-ignore
import { InlineResponse403 } from '../models';
/**
 * InventoryApi - axios parameter creator
 * @export
 */
export const InventoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API can be used to check the inventory details of a product sku. There are no required parameters for this API, but additional parameters can be used to sort and filter the data.   In case no filter conditions are passed, the details are displayed in the default JSON format.  #### Parameters:  | **PARAMS**  | **REQUIRED**  |  **DATA TYPE**  |                                                    **DESCRIPTION**                                                    | **EXAMPLE**  | |:----------: |:------------: |:--------------: |:--------------------------------------------------------------------------------------------------------------------: |:-----------: | |    `page`     |      NO       |    *integer*    |                                           The page number to be displayed.                                            |      4       | |  `per_page`   |      NO       |    *integer*    |                                  The total products you want to diplay in each page.                                  |      2       | |    `sort`     |      NO       |    *string*     |                                      Sort conditions if any. Value: ASC or DESC                                       |     ASC      | |   `sort_by`   |      NO       |    *integer*    |  Allows you to choose the field by which the data will be sorted.   Could be sorted by id, by sku, time created etc.  |     sku      |
         * @summary Get Inventory Details
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalInventoryGet: async (contentType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling v1ExternalInventoryGet.');
            }
            const localVarPath = `/v1/external/inventory`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API is used to update your product inventory details.  First, you need to pass the product_id of the product in the endpoint URL. You can then set the quantity and action you want to perform on the existing inventory of the specified product.  **Note:** - The product_id can be found using the \'Get Inventory Details\' API. - The id is to be passed in the endpoint URL itself.  #### Path:   |                 **EXAMPLE**                 | |:------------------------------------------: | | https://apiv2.shiprocket.in/v1/external/inventory/17454637/update |    #### Parameters:  | **PARAMS**  | **REQUIRED**  |  **DATA TYPE**  |                                                                                                                      **DESCRIPTION**                                                                                                                      | **EXAMPLE**  | |:----------: |:------------: |:--------------: |:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |:-----------: | |  `quantity`   |      YES      |    *integer*    |                                                                                                           The quantity of the product you want.                                                                                                           |      2       | |   `action`    |      YES      |    *integer*    |  The action you want to perform. *Value*:    - **add** : Adds the specific quantity to the product inventory.   - **replace** : Replaces the existing quantity with the specified number. - **remove** : Removes the specific number from the product inventory.  |     add      |
         * @summary Update Your Inventory 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalInventoryProductIdUpdatePut: async (body?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/external/inventory/{product_id}/update`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'text/plain';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InventoryApi - functional programming interface
 * @export
 */
export const InventoryApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This API can be used to check the inventory details of a product sku. There are no required parameters for this API, but additional parameters can be used to sort and filter the data.   In case no filter conditions are passed, the details are displayed in the default JSON format.  #### Parameters:  | **PARAMS**  | **REQUIRED**  |  **DATA TYPE**  |                                                    **DESCRIPTION**                                                    | **EXAMPLE**  | |:----------: |:------------: |:--------------: |:--------------------------------------------------------------------------------------------------------------------: |:-----------: | |    `page`     |      NO       |    *integer*    |                                           The page number to be displayed.                                            |      4       | |  `per_page`   |      NO       |    *integer*    |                                  The total products you want to diplay in each page.                                  |      2       | |    `sort`     |      NO       |    *string*     |                                      Sort conditions if any. Value: ASC or DESC                                       |     ASC      | |   `sort_by`   |      NO       |    *integer*    |  Allows you to choose the field by which the data will be sorted.   Could be sorted by id, by sku, time created etc.  |     sku      |
         * @summary Get Inventory Details
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExternalInventoryGet(contentType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20044>> {
            const localVarAxiosArgs = await InventoryApiAxiosParamCreator(configuration).v1ExternalInventoryGet(contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This API is used to update your product inventory details.  First, you need to pass the product_id of the product in the endpoint URL. You can then set the quantity and action you want to perform on the existing inventory of the specified product.  **Note:** - The product_id can be found using the \'Get Inventory Details\' API. - The id is to be passed in the endpoint URL itself.  #### Path:   |                 **EXAMPLE**                 | |:------------------------------------------: | | https://apiv2.shiprocket.in/v1/external/inventory/17454637/update |    #### Parameters:  | **PARAMS**  | **REQUIRED**  |  **DATA TYPE**  |                                                                                                                      **DESCRIPTION**                                                                                                                      | **EXAMPLE**  | |:----------: |:------------: |:--------------: |:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |:-----------: | |  `quantity`   |      YES      |    *integer*    |                                                                                                           The quantity of the product you want.                                                                                                           |      2       | |   `action`    |      YES      |    *integer*    |  The action you want to perform. *Value*:    - **add** : Adds the specific quantity to the product inventory.   - **replace** : Replaces the existing quantity with the specified number. - **remove** : Removes the specific number from the product inventory.  |     add      |
         * @summary Update Your Inventory 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExternalInventoryProductIdUpdatePut(body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20045>> {
            const localVarAxiosArgs = await InventoryApiAxiosParamCreator(configuration).v1ExternalInventoryProductIdUpdatePut(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * InventoryApi - factory interface
 * @export
 */
export const InventoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This API can be used to check the inventory details of a product sku. There are no required parameters for this API, but additional parameters can be used to sort and filter the data.   In case no filter conditions are passed, the details are displayed in the default JSON format.  #### Parameters:  | **PARAMS**  | **REQUIRED**  |  **DATA TYPE**  |                                                    **DESCRIPTION**                                                    | **EXAMPLE**  | |:----------: |:------------: |:--------------: |:--------------------------------------------------------------------------------------------------------------------: |:-----------: | |    `page`     |      NO       |    *integer*    |                                           The page number to be displayed.                                            |      4       | |  `per_page`   |      NO       |    *integer*    |                                  The total products you want to diplay in each page.                                  |      2       | |    `sort`     |      NO       |    *string*     |                                      Sort conditions if any. Value: ASC or DESC                                       |     ASC      | |   `sort_by`   |      NO       |    *integer*    |  Allows you to choose the field by which the data will be sorted.   Could be sorted by id, by sku, time created etc.  |     sku      |
         * @summary Get Inventory Details
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalInventoryGet(contentType: string, options?: any): AxiosPromise<InlineResponse20044> {
            return InventoryApiFp(configuration).v1ExternalInventoryGet(contentType, options).then((request) => request(axios, basePath));
        },
        /**
         * This API is used to update your product inventory details.  First, you need to pass the product_id of the product in the endpoint URL. You can then set the quantity and action you want to perform on the existing inventory of the specified product.  **Note:** - The product_id can be found using the \'Get Inventory Details\' API. - The id is to be passed in the endpoint URL itself.  #### Path:   |                 **EXAMPLE**                 | |:------------------------------------------: | | https://apiv2.shiprocket.in/v1/external/inventory/17454637/update |    #### Parameters:  | **PARAMS**  | **REQUIRED**  |  **DATA TYPE**  |                                                                                                                      **DESCRIPTION**                                                                                                                      | **EXAMPLE**  | |:----------: |:------------: |:--------------: |:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |:-----------: | |  `quantity`   |      YES      |    *integer*    |                                                                                                           The quantity of the product you want.                                                                                                           |      2       | |   `action`    |      YES      |    *integer*    |  The action you want to perform. *Value*:    - **add** : Adds the specific quantity to the product inventory.   - **replace** : Replaces the existing quantity with the specified number. - **remove** : Removes the specific number from the product inventory.  |     add      |
         * @summary Update Your Inventory 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExternalInventoryProductIdUpdatePut(body?: string, options?: any): AxiosPromise<InlineResponse20045> {
            return InventoryApiFp(configuration).v1ExternalInventoryProductIdUpdatePut(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InventoryApi - interface
 * @export
 * @interface InventoryApi
 */
export interface InventoryApiInterface {
    /**
     * This API can be used to check the inventory details of a product sku. There are no required parameters for this API, but additional parameters can be used to sort and filter the data.   In case no filter conditions are passed, the details are displayed in the default JSON format.  #### Parameters:  | **PARAMS**  | **REQUIRED**  |  **DATA TYPE**  |                                                    **DESCRIPTION**                                                    | **EXAMPLE**  | |:----------: |:------------: |:--------------: |:--------------------------------------------------------------------------------------------------------------------: |:-----------: | |    `page`     |      NO       |    *integer*    |                                           The page number to be displayed.                                            |      4       | |  `per_page`   |      NO       |    *integer*    |                                  The total products you want to diplay in each page.                                  |      2       | |    `sort`     |      NO       |    *string*     |                                      Sort conditions if any. Value: ASC or DESC                                       |     ASC      | |   `sort_by`   |      NO       |    *integer*    |  Allows you to choose the field by which the data will be sorted.   Could be sorted by id, by sku, time created etc.  |     sku      |
     * @summary Get Inventory Details
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApiInterface
     */
    v1ExternalInventoryGet(contentType: string, options?: any): AxiosPromise<InlineResponse20044>;

    /**
     * This API is used to update your product inventory details.  First, you need to pass the product_id of the product in the endpoint URL. You can then set the quantity and action you want to perform on the existing inventory of the specified product.  **Note:** - The product_id can be found using the \'Get Inventory Details\' API. - The id is to be passed in the endpoint URL itself.  #### Path:   |                 **EXAMPLE**                 | |:------------------------------------------: | | https://apiv2.shiprocket.in/v1/external/inventory/17454637/update |    #### Parameters:  | **PARAMS**  | **REQUIRED**  |  **DATA TYPE**  |                                                                                                                      **DESCRIPTION**                                                                                                                      | **EXAMPLE**  | |:----------: |:------------: |:--------------: |:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |:-----------: | |  `quantity`   |      YES      |    *integer*    |                                                                                                           The quantity of the product you want.                                                                                                           |      2       | |   `action`    |      YES      |    *integer*    |  The action you want to perform. *Value*:    - **add** : Adds the specific quantity to the product inventory.   - **replace** : Replaces the existing quantity with the specified number. - **remove** : Removes the specific number from the product inventory.  |     add      |
     * @summary Update Your Inventory 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApiInterface
     */
    v1ExternalInventoryProductIdUpdatePut(body?: string, options?: any): AxiosPromise<InlineResponse20045>;

}

/**
 * InventoryApi - object-oriented interface
 * @export
 * @class InventoryApi
 * @extends {BaseAPI}
 */
export class InventoryApi extends BaseAPI implements InventoryApiInterface {
    /**
     * This API can be used to check the inventory details of a product sku. There are no required parameters for this API, but additional parameters can be used to sort and filter the data.   In case no filter conditions are passed, the details are displayed in the default JSON format.  #### Parameters:  | **PARAMS**  | **REQUIRED**  |  **DATA TYPE**  |                                                    **DESCRIPTION**                                                    | **EXAMPLE**  | |:----------: |:------------: |:--------------: |:--------------------------------------------------------------------------------------------------------------------: |:-----------: | |    `page`     |      NO       |    *integer*    |                                           The page number to be displayed.                                            |      4       | |  `per_page`   |      NO       |    *integer*    |                                  The total products you want to diplay in each page.                                  |      2       | |    `sort`     |      NO       |    *string*     |                                      Sort conditions if any. Value: ASC or DESC                                       |     ASC      | |   `sort_by`   |      NO       |    *integer*    |  Allows you to choose the field by which the data will be sorted.   Could be sorted by id, by sku, time created etc.  |     sku      |
     * @summary Get Inventory Details
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public v1ExternalInventoryGet(contentType: string, options?: any) {
        return InventoryApiFp(this.configuration).v1ExternalInventoryGet(contentType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API is used to update your product inventory details.  First, you need to pass the product_id of the product in the endpoint URL. You can then set the quantity and action you want to perform on the existing inventory of the specified product.  **Note:** - The product_id can be found using the \'Get Inventory Details\' API. - The id is to be passed in the endpoint URL itself.  #### Path:   |                 **EXAMPLE**                 | |:------------------------------------------: | | https://apiv2.shiprocket.in/v1/external/inventory/17454637/update |    #### Parameters:  | **PARAMS**  | **REQUIRED**  |  **DATA TYPE**  |                                                                                                                      **DESCRIPTION**                                                                                                                      | **EXAMPLE**  | |:----------: |:------------: |:--------------: |:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |:-----------: | |  `quantity`   |      YES      |    *integer*    |                                                                                                           The quantity of the product you want.                                                                                                           |      2       | |   `action`    |      YES      |    *integer*    |  The action you want to perform. *Value*:    - **add** : Adds the specific quantity to the product inventory.   - **replace** : Replaces the existing quantity with the specified number. - **remove** : Removes the specific number from the product inventory.  |     add      |
     * @summary Update Your Inventory 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public v1ExternalInventoryProductIdUpdatePut(body?: string, options?: any) {
        return InventoryApiFp(this.configuration).v1ExternalInventoryProductIdUpdatePut(body, options).then((request) => request(this.axios, this.basePath));
    }

}
